/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/basic/gen-cpp/MyServicePrioChild.h"
#include <folly/ScopeGuard.h>

#include "thrift/compiler/test/fixtures/basic/gen-cpp/module_reflection.h"



const uint64_t MyServicePrioChild_pang_args::_reflection_id;
void MyServicePrioChild_pang_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_6708350789317430956(schema);
}

void MyServicePrioChild_pang_args::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServicePrioChild_pang_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_6708350789317430956(*schema);
    iprot->setNextStructType(MyServicePrioChild_pang_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServicePrioChild_pang_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServicePrioChild_pang_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServicePrioChild_pang_pargs::_reflection_id;
void MyServicePrioChild_pang_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_13933468378955615660(schema);
}

void MyServicePrioChild_pang_pargs::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServicePrioChild_pang_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServicePrioChild_pang_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServicePrioChild_pang_presult::_reflection_id;
void MyServicePrioChild_pang_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_6662883238703015788(schema);
}

void MyServicePrioChild_pang_presult::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServicePrioChild_pang_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_6662883238703015788(*schema);
    iprot->setNextStructType(MyServicePrioChild_pang_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServicePrioChild_pang_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyServicePrioChild_pang_presult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MyServicePrioChildClient::getServiceName() {
{
  return "MyServicePrioChild";
}
}
void MyServicePrioChildClient::pang()
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyServicePrioChild.pang", this->getConnectionContext());

  try {
    send_pang();
    recv_pang();
  } catch (apache::thrift::transport::TTransportException&) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void MyServicePrioChildClient::send_pang()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("pang", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  MyServicePrioChild_pang_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes16 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes16);
  return;
}

folly::exception_wrapper MyServicePrioChildClient::recv_wrapped_pang()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string _fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(_fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (_fname.compare("pang") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyServicePrioChild_pang_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void MyServicePrioChildClient::recv_pang()
{
  auto ew = recv_wrapped_pang();
  if (ew) {
    ew.throw_exception();
  }
}

bool MyServicePrioChildProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& _fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(_fname);
  if (pfn == processMap_.end()) {
    return MyServicePrioParentProcessor::dispatchCall(iprot, oprot, _fname, seqid, connectionContext);
  }
  const ProcessFunction& pf = pfn->second;
  (this->*pf)(seqid, iprot, oprot, connectionContext);
  return true;
}

void MyServicePrioChildProcessor::process_pang(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyServicePrioChild.pang", connectionContext));

  if (ctx) ctx->preRead();
  MyServicePrioChild_pang_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("pang", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyServicePrioChild_pang_presult result;
  try {
    iface_->pang();
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("pang", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("pang", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

::std::shared_ptr< ::apache::thrift::TProcessor > MyServicePrioChildProcessorFactory::getProcessor(::apache::thrift::server::TConnectionContext* ctx) {
  ::apache::thrift::ReleaseHandler< MyServicePrioChildIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< MyServicePrioChildIf > handler(handlerFactory_->getHandler(ctx), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new MyServicePrioChildProcessor(handler));
  return processor;
}


