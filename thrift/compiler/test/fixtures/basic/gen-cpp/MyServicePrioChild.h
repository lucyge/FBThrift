/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _MyServicePrioChild_H
#define  _MyServicePrioChild_H

#include <thrift/lib/cpp/TDispatchProcessor.h>
#include <folly/ExceptionWrapper.h>
#include "thrift/compiler/test/fixtures/basic/gen-cpp/module_types.h"
#include "thrift/compiler/test/fixtures/basic/gen-cpp/MyServicePrioParent.h"



class MyServicePrioChildIf : virtual public MyServicePrioParentIf {
 public:
  virtual ~MyServicePrioChildIf() {}
  virtual void pang() = 0;
};

class MyServicePrioChildIfFactory : virtual public MyServicePrioParentIfFactory {
 public:
  typedef MyServicePrioChildIf Handler;

  virtual ~MyServicePrioChildIfFactory() {}

  virtual MyServicePrioChildIf* getHandler(::apache::thrift::server::TConnectionContext* ctx) = 0;
  virtual void releaseHandler(MyServicePrioParentIf* /*handler*/) = 0;
};

class MyServicePrioChildIfSingletonFactory : virtual public MyServicePrioChildIfFactory {
 public:
  MyServicePrioChildIfSingletonFactory(const std::shared_ptr<MyServicePrioChildIf>& iface) : iface_(iface) {}
  virtual ~MyServicePrioChildIfSingletonFactory() {}

  virtual MyServicePrioChildIf* getHandler(::apache::thrift::server::TConnectionContext*) {
    return iface_.get();
  }
  virtual void releaseHandler(MyServicePrioParentIf* /*handler*/) {}

 protected:
  std::shared_ptr<MyServicePrioChildIf> iface_;
};

class MyServicePrioChildNull : virtual public MyServicePrioChildIf , virtual public MyServicePrioParentNull {
 public:
  virtual ~MyServicePrioChildNull() {}
  void pang() {
    return;
  }
};

class MyServicePrioChild_pang_args final : public apache::thrift::TStructType<MyServicePrioChild_pang_args> {
 public:

  static const uint64_t _reflection_id = 6708350789317430956U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyServicePrioChild_pang_args() {
  }

  MyServicePrioChild_pang_args(const MyServicePrioChild_pang_args&) = default;
  MyServicePrioChild_pang_args& operator=(const MyServicePrioChild_pang_args& src)= default;
  MyServicePrioChild_pang_args(MyServicePrioChild_pang_args&&) = default;
  MyServicePrioChild_pang_args& operator=(MyServicePrioChild_pang_args&&) = default;

  void __clear();

  bool operator == (const MyServicePrioChild_pang_args &) const;
  bool operator != (const MyServicePrioChild_pang_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyServicePrioChild_pang_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyServicePrioChild_pang_args;
void merge(const MyServicePrioChild_pang_args& from, MyServicePrioChild_pang_args& to);
void merge(MyServicePrioChild_pang_args&& from, MyServicePrioChild_pang_args& to);
class MyServicePrioChild_pang_pargs final : public apache::thrift::TStructType<MyServicePrioChild_pang_pargs> {
 public:

  static const uint64_t _reflection_id = 13933468378955615660U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyServicePrioChild_pang_pargs() = default;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyServicePrioChild_pang_pargs;
void merge(const MyServicePrioChild_pang_pargs& from, MyServicePrioChild_pang_pargs& to);
void merge(MyServicePrioChild_pang_pargs&& from, MyServicePrioChild_pang_pargs& to);
class MyServicePrioChild_pang_presult final : public apache::thrift::TStructType<MyServicePrioChild_pang_presult> {
 public:

  static const uint64_t _reflection_id = 6662883238703015788U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyServicePrioChild_pang_presult() = default;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyServicePrioChild_pang_presult;
void merge(const MyServicePrioChild_pang_presult& from, MyServicePrioChild_pang_presult& to);
void merge(MyServicePrioChild_pang_presult&& from, MyServicePrioChild_pang_presult& to);
class MyServicePrioChildClient : virtual public MyServicePrioChildIf, public MyServicePrioParentClient {
 public:
  MyServicePrioChildClient(std::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    MyServicePrioParentClient(prot, prot) {}
  MyServicePrioChildClient(std::shared_ptr<apache::thrift::protocol::TProtocol> iprot, std::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    MyServicePrioParentClient(iprot, oprot) {}
  std::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  virtual ~MyServicePrioChildClient() {}
  void pang();
  virtual void send_pang();
  virtual void recv_pang();
  virtual folly::exception_wrapper recv_wrapped_pang();
  virtual const char* getServiceName();
};

class MyServicePrioChildProcessor : public MyServicePrioParentProcessor {
 public:
  virtual const char* getServiceName() {
    return "MyServicePrioChild";
  }
 protected:
  std::shared_ptr<MyServicePrioChildIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext);
 private:
  typedef  void (MyServicePrioChildProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, apache::thrift::server::TConnectionContext*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_pang(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
 public:
  MyServicePrioChildProcessor(std::shared_ptr<MyServicePrioChildIf> iface) :
    MyServicePrioParentProcessor(iface),
    iface_(iface) {
    processMap_["pang"] = &MyServicePrioChildProcessor::process_pang;
  }

  virtual ~MyServicePrioChildProcessor() {}

  std::shared_ptr<std::set<std::string> > getProcessFunctions() { 
    std::shared_ptr<std::set<std::string> > rSet(new std::set<std::string>());
    rSet->insert("MyServicePrioChild.pang");
    return rSet;
  }
};

class MyServicePrioChildProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MyServicePrioChildProcessorFactory(const ::std::shared_ptr< MyServicePrioChildIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(::apache::thrift::server::TConnectionContext* ctx);

 protected:
  ::std::shared_ptr< MyServicePrioChildIfFactory > handlerFactory_;
};

class MyServicePrioChildMultiface : virtual public MyServicePrioChildIf, public MyServicePrioParentMultiface {
 public:
  MyServicePrioChildMultiface(std::vector<std::shared_ptr<MyServicePrioChildIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<MyServicePrioChildIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      MyServicePrioParentMultiface::add(*iter);
    }
  }
  virtual ~MyServicePrioChildMultiface() {}
 protected:
  std::vector<std::shared_ptr<MyServicePrioChildIf> > ifaces_;
  MyServicePrioChildMultiface() {}
  void add(std::shared_ptr<MyServicePrioChildIf> iface) {
    MyServicePrioParentMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void pang() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->pang();
    }
  }

};



#endif
