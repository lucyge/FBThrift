/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "thrift/compiler/test/fixtures/basic/gen-cpp/MyServicePrioParent.h"
#include <thrift/lib/cpp/async/TEventServer.h>
#include <thrift/lib/cpp/server/TConnectionContext.h>
#include <thrift/lib/cpp/util/TEventServerCreator.h>

using apache::thrift::TProcessor;
using apache::thrift::async::TEventServer;
using apache::thrift::util::TEventServerCreator;

using std::shared_ptr;

using namespace  ;

class MyServicePrioParentHandler : virtual public MyServicePrioParentIf {
 public:
  MyServicePrioParentHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void pong() {
    // Your implementation goes here
    printf("pong\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MyServicePrioParentHandler> handler(new MyServicePrioParentHandler());
  shared_ptr<TProcessor> processor(new MyServicePrioParentProcessor(handler));
  TEventServerCreator serverCreator(processor, port);
  shared_ptr<TEventServer> server = serverCreator.createEventServer();
  server->serve();
  return 0;
}
