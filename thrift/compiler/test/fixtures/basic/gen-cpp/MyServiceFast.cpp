/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/basic/gen-cpp/MyServiceFast.h"
#include <folly/ScopeGuard.h>

#include "thrift/compiler/test/fixtures/basic/gen-cpp/module_reflection.h"



const uint64_t MyServiceFast_ping_args::_reflection_id;
void MyServiceFast_ping_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_13297394169545716012(schema);
}

void MyServiceFast_ping_args::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServiceFast_ping_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_13297394169545716012(*schema);
    iprot->setNextStructType(MyServiceFast_ping_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_ping_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_ping_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_ping_pargs::_reflection_id;
void MyServiceFast_ping_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_10013556897733106540(schema);
}

void MyServiceFast_ping_pargs::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServiceFast_ping_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_ping_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_ping_presult::_reflection_id;
void MyServiceFast_ping_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_2896269803413006412(schema);
}

void MyServiceFast_ping_presult::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServiceFast_ping_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_2896269803413006412(*schema);
    iprot->setNextStructType(MyServiceFast_ping_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_ping_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyServiceFast_ping_presult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_getRandomData_args::_reflection_id;
void MyServiceFast_getRandomData_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_7860776305358079468(schema);
}

void MyServiceFast_getRandomData_args::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServiceFast_getRandomData_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_7860776305358079468(*schema);
    iprot->setNextStructType(MyServiceFast_getRandomData_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_getRandomData_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_getRandomData_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_getRandomData_pargs::_reflection_id;
void MyServiceFast_getRandomData_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_17116623944762865804(schema);
}

void MyServiceFast_getRandomData_pargs::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServiceFast_getRandomData_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_getRandomData_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_getRandomData_presult::_reflection_id;
void MyServiceFast_getRandomData_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_11994669763530285548(schema);
}

void MyServiceFast_getRandomData_presult::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "success") {
    fid = 0;
    _ftype = apache::thrift::protocol::T_STRING;
  }
};

uint32_t MyServiceFast_getRandomData_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_11994669763530285548(*schema);
    iprot->setNextStructType(MyServiceFast_getRandomData_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_getRandomData_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyServiceFast_getRandomData_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeString((*(this->success)));
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_hasDataById_args::_reflection_id;
void MyServiceFast_hasDataById_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_16544393981270173068(schema);
}

void MyServiceFast_hasDataById_args::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
};

uint32_t MyServiceFast_hasDataById_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_16544393981270173068(*schema);
    iprot->setNextStructType(MyServiceFast_hasDataById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_hasDataById_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_hasDataById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_hasDataById_pargs::_reflection_id;
void MyServiceFast_hasDataById_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_6647526459198525900(schema);
}

void MyServiceFast_hasDataById_pargs::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
};

uint32_t MyServiceFast_hasDataById_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_hasDataById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_hasDataById_presult::_reflection_id;
void MyServiceFast_hasDataById_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_4432778191137181708(schema);
}

void MyServiceFast_hasDataById_presult::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "success") {
    fid = 0;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
};

uint32_t MyServiceFast_hasDataById_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_4432778191137181708(*schema);
    iprot->setNextStructType(MyServiceFast_hasDataById_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_hasDataById_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyServiceFast_hasDataById_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_BOOL, 0);
    xfer += oprot->writeBool((*(this->success)));
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_getDataById_args::_reflection_id;
void MyServiceFast_getDataById_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_7870403311925922956(schema);
}

void MyServiceFast_getDataById_args::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
};

uint32_t MyServiceFast_getDataById_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_7870403311925922956(*schema);
    iprot->setNextStructType(MyServiceFast_getDataById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_getDataById_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_getDataById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_getDataById_pargs::_reflection_id;
void MyServiceFast_getDataById_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_1623351238808566124(schema);
}

void MyServiceFast_getDataById_pargs::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
};

uint32_t MyServiceFast_getDataById_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_getDataById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_getDataById_presult::_reflection_id;
void MyServiceFast_getDataById_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_12937877697079870508(schema);
}

void MyServiceFast_getDataById_presult::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "success") {
    fid = 0;
    _ftype = apache::thrift::protocol::T_STRING;
  }
};

uint32_t MyServiceFast_getDataById_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_12937877697079870508(*schema);
    iprot->setNextStructType(MyServiceFast_getDataById_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_getDataById_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyServiceFast_getDataById_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeString((*(this->success)));
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_putDataById_args::_reflection_id;
void MyServiceFast_putDataById_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_5240787399467302572(schema);
}

void MyServiceFast_putDataById_args::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "data") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
};

uint32_t MyServiceFast_putDataById_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_5240787399467302572(*schema);
    iprot->setNextStructType(MyServiceFast_putDataById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      case 2:
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_putDataById_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_putDataById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_putDataById_pargs::_reflection_id;
void MyServiceFast_putDataById_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_2400771228403367052(schema);
}

void MyServiceFast_putDataById_pargs::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "data") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
};

uint32_t MyServiceFast_putDataById_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_putDataById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->data)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_putDataById_presult::_reflection_id;
void MyServiceFast_putDataById_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_6473241192987738956(schema);
}

void MyServiceFast_putDataById_presult::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
};

uint32_t MyServiceFast_putDataById_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_6473241192987738956(*schema);
    iprot->setNextStructType(MyServiceFast_putDataById_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_putDataById_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyServiceFast_putDataById_presult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_lobDataById_args::_reflection_id;
void MyServiceFast_lobDataById_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_6539614639720993804(schema);
}

void MyServiceFast_lobDataById_args::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "data") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
};

uint32_t MyServiceFast_lobDataById_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_6539614639720993804(*schema);
    iprot->setNextStructType(MyServiceFast_lobDataById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      case 2:
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      default:
        xfer += iprot->skip(_ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyServiceFast_lobDataById_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_lobDataById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t MyServiceFast_lobDataById_pargs::_reflection_id;
void MyServiceFast_lobDataById_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_12884209126637567500(schema);
}

void MyServiceFast_lobDataById_pargs::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "id") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "data") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
};

uint32_t MyServiceFast_lobDataById_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyServiceFast_lobDataById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->data)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

int32_t MyServiceFastClient::getNextSendSequenceId()
{
  return nextSendSequenceId_++;
}

int32_t MyServiceFastClient::getNextRecvSequenceId()
{
  return nextRecvSequenceId_++;
}

const char* MyServiceFastClient::getServiceName() {
{
  return "MyServiceFast";
}
}
void MyServiceFastClient::ping()
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyServiceFast.ping", this->getConnectionContext());

  try {
    send_ping();
    recv_ping();
  } catch (apache::thrift::transport::TTransportException&) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void MyServiceFastClient::send_ping()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("ping", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  MyServiceFast_ping_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes8 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes8);
  return;
}

folly::exception_wrapper MyServiceFastClient::recv_wrapped_ping()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string _fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(_fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (_fname.compare("ping") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyServiceFast_ping_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void MyServiceFastClient::recv_ping()
{
  auto ew = recv_wrapped_ping();
  if (ew) {
    ew.throw_exception();
  }
}

void MyServiceFastClient::getRandomData(std::string& _return)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyServiceFast.getRandomData", this->getConnectionContext());

  try {
    send_getRandomData();
    recv_getRandomData(_return);
  } catch (apache::thrift::transport::TTransportException&) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void MyServiceFastClient::send_getRandomData()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("getRandomData", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  MyServiceFast_getRandomData_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes9 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes9);
  return;
}

folly::exception_wrapper MyServiceFastClient::recv_wrapped_getRandomData(std::string& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string _fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(_fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (_fname.compare("getRandomData") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyServiceFast_getRandomData_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      // _return pointer has now been filled
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "getRandomData failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void MyServiceFastClient::recv_getRandomData(std::string& _return)
{
  auto ew = recv_wrapped_getRandomData(_return);
  if (ew) {
    ew.throw_exception();
  }
}

bool MyServiceFastClient::hasDataById(int64_t id)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyServiceFast.hasDataById", this->getConnectionContext());

  try {
    send_hasDataById(id);
    return recv_hasDataById();
  } catch (apache::thrift::transport::TTransportException&) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void MyServiceFastClient::send_hasDataById(int64_t id)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("hasDataById", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  MyServiceFast_hasDataById_pargs args;
  args.id = &id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes10 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes10);
  return;
}

folly::exception_wrapper MyServiceFastClient::recv_wrapped_hasDataById(bool& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string _fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(_fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (_fname.compare("hasDataById") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyServiceFast_hasDataById_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "hasDataById failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

bool MyServiceFastClient::recv_hasDataById()
{
  bool _return;
  auto ew = recv_wrapped_hasDataById(_return);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

void MyServiceFastClient::getDataById(std::string& _return, int64_t id)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyServiceFast.getDataById", this->getConnectionContext());

  try {
    send_getDataById(id);
    recv_getDataById(_return);
  } catch (apache::thrift::transport::TTransportException&) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void MyServiceFastClient::send_getDataById(int64_t id)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("getDataById", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  MyServiceFast_getDataById_pargs args;
  args.id = &id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes11 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes11);
  return;
}

folly::exception_wrapper MyServiceFastClient::recv_wrapped_getDataById(std::string& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string _fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(_fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (_fname.compare("getDataById") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyServiceFast_getDataById_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      // _return pointer has now been filled
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "getDataById failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void MyServiceFastClient::recv_getDataById(std::string& _return)
{
  auto ew = recv_wrapped_getDataById(_return);
  if (ew) {
    ew.throw_exception();
  }
}

void MyServiceFastClient::putDataById(int64_t id, const std::string& data)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyServiceFast.putDataById", this->getConnectionContext());

  try {
    send_putDataById(id, data);
    recv_putDataById();
  } catch (apache::thrift::transport::TTransportException&) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void MyServiceFastClient::send_putDataById(int64_t id, const std::string& data)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("putDataById", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  MyServiceFast_putDataById_pargs args;
  args.id = &id;
  args.data = &data;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes12 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes12);
  return;
}

folly::exception_wrapper MyServiceFastClient::recv_wrapped_putDataById()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string _fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(_fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (_fname.compare("putDataById") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyServiceFast_putDataById_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void MyServiceFastClient::recv_putDataById()
{
  auto ew = recv_wrapped_putDataById();
  if (ew) {
    ew.throw_exception();
  }
}

void MyServiceFastClient::lobDataById(int64_t id, const std::string& data)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyServiceFast.lobDataById", this->getConnectionContext());

  try {
    send_lobDataById(id, data);
  } catch (apache::thrift::transport::TTransportException&) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void MyServiceFastClient::send_lobDataById(int64_t id, const std::string& data)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("lobDataById", apache::thrift::protocol::T_CALL, 0);

  MyServiceFast_lobDataById_pargs args;
  args.id = &id;
  args.data = &data;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes13 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->onewayFlush();
  if (ctx) ctx->postWrite(_bytes13);
  return;
}

bool MyServiceFastProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& _fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(_fname);
  if (pfn == processMap_.end()) {
    iprot->skip(apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+_fname+"'");
    oprot->writeMessageBegin(_fname, apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  const ProcessFunction& pf = pfn->second;
  (this->*pf)(seqid, iprot, oprot, connectionContext);
  return true;
}

void MyServiceFastProcessor::process_ping(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyServiceFast.ping", connectionContext));

  if (ctx) ctx->preRead();
  MyServiceFast_ping_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("ping", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyServiceFast_ping_presult result;
  try {
    iface_->ping();
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ping", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("ping", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void MyServiceFastProcessor::process_getRandomData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyServiceFast.getRandomData", connectionContext));

  if (ctx) ctx->preRead();
  MyServiceFast_getRandomData_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyServiceFast_getRandomData_presult result;
  std::string success;
  result.success = &success;
  try {
    iface_->getRandomData(*result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void MyServiceFastProcessor::process_hasDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyServiceFast.hasDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyServiceFast_hasDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyServiceFast_hasDataById_presult result;
  bool success;
  result.success = &success;
  try {
    *result.success = iface_->hasDataById(args.id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void MyServiceFastProcessor::process_getDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyServiceFast.getDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyServiceFast_getDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyServiceFast_getDataById_presult result;
  std::string success;
  result.success = &success;
  try {
    iface_->getDataById(*result.success, args.id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void MyServiceFastProcessor::process_putDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyServiceFast.putDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyServiceFast_putDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyServiceFast_putDataById_presult result;
  try {
    iface_->putDataById(args.id, args.data);
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void MyServiceFastProcessor::process_lobDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyServiceFast.lobDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyServiceFast_lobDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("lobDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  try {
    iface_->lobDataById(args.id, args.data);
  } catch (const std::exception&) {
    if (ctx) ctx->handlerError();

    return;
  }

  if (ctx) ctx->asyncComplete();
  return;
}

::std::shared_ptr< ::apache::thrift::TProcessor > MyServiceFastProcessorFactory::getProcessor(::apache::thrift::server::TConnectionContext* ctx) {
  ::apache::thrift::ReleaseHandler< MyServiceFastIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< MyServiceFastIf > handler(handlerFactory_->getHandler(ctx), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new MyServiceFastProcessor(handler));
  return processor;
}


