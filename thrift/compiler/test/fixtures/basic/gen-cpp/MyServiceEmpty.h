/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _MyServiceEmpty_H
#define  _MyServiceEmpty_H

#include <thrift/lib/cpp/TDispatchProcessor.h>
#include <folly/ExceptionWrapper.h>
#include "thrift/compiler/test/fixtures/basic/gen-cpp/module_types.h"



class MyServiceEmptyIf {
 public:
  virtual ~MyServiceEmptyIf() {}
};

class MyServiceEmptyIfFactory {
 public:
  typedef MyServiceEmptyIf Handler;

  virtual ~MyServiceEmptyIfFactory() {}

  virtual MyServiceEmptyIf* getHandler(::apache::thrift::server::TConnectionContext* ctx) = 0;
  virtual void releaseHandler(MyServiceEmptyIf* /*handler*/) = 0;
};

class MyServiceEmptyIfSingletonFactory : virtual public MyServiceEmptyIfFactory {
 public:
  MyServiceEmptyIfSingletonFactory(const std::shared_ptr<MyServiceEmptyIf>& iface) : iface_(iface) {}
  virtual ~MyServiceEmptyIfSingletonFactory() {}

  virtual MyServiceEmptyIf* getHandler(::apache::thrift::server::TConnectionContext*) {
    return iface_.get();
  }
  virtual void releaseHandler(MyServiceEmptyIf* /*handler*/) {}

 protected:
  std::shared_ptr<MyServiceEmptyIf> iface_;
};

class MyServiceEmptyNull : virtual public MyServiceEmptyIf {
 public:
  virtual ~MyServiceEmptyNull() {}
};

class MyServiceEmptyClient : virtual public MyServiceEmptyIf, virtual public apache::thrift::TClientBase {
 public:
  MyServiceEmptyClient(std::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  MyServiceEmptyClient(std::shared_ptr<apache::thrift::protocol::TProtocol> iprot, std::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  virtual ~MyServiceEmptyClient() {}
  apache::thrift::server::TConnectionContext* getConnectionContext() {
    return connectionContext_.get();
  }

  /**
   * Disable checking the seqid field in server responses.
   *
   * This should only be used with broken servers that return incorrect seqid values.
   */
  void _disableSequenceIdChecks() {
    checkSeqid_ = false;
  }

 protected:
  bool checkSeqid_;
  int32_t nextSendSequenceId_;
  int32_t nextRecvSequenceId_;
  int32_t getNextSendSequenceId();
  int32_t getNextRecvSequenceId();
  std::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<apache::thrift::server::TConnectionContext> connectionContext_;
  virtual const char* getServiceName();
};

class MyServiceEmptyProcessor : public ::apache::thrift::TDispatchProcessor {
 public:
  virtual const char* getServiceName() {
    return "MyServiceEmpty";
  }
 protected:
  std::shared_ptr<MyServiceEmptyIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext);
 private:
  typedef  void (MyServiceEmptyProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, apache::thrift::server::TConnectionContext*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
 public:
  MyServiceEmptyProcessor(std::shared_ptr<MyServiceEmptyIf> iface) :
    iface_(iface) {
  }

  virtual ~MyServiceEmptyProcessor() {}

  std::shared_ptr<std::set<std::string> > getProcessFunctions() { 
    std::shared_ptr<std::set<std::string> > rSet(new std::set<std::string>());
    return rSet;
  }
};

class MyServiceEmptyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MyServiceEmptyProcessorFactory(const ::std::shared_ptr< MyServiceEmptyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(::apache::thrift::server::TConnectionContext* ctx);

 protected:
  ::std::shared_ptr< MyServiceEmptyIfFactory > handlerFactory_;
};

class MyServiceEmptyMultiface : virtual public MyServiceEmptyIf {
 public:
  MyServiceEmptyMultiface(std::vector<std::shared_ptr<MyServiceEmptyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MyServiceEmptyMultiface() {}
 protected:
  std::vector<std::shared_ptr<MyServiceEmptyIf> > ifaces_;
  MyServiceEmptyMultiface() {}
  void add(std::shared_ptr<MyServiceEmptyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
};



#endif
