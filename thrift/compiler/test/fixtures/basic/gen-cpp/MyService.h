/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _MyService_H
#define  _MyService_H

#include <thrift/lib/cpp/TDispatchProcessor.h>
#include <folly/ExceptionWrapper.h>
#include "thrift/compiler/test/fixtures/basic/gen-cpp/module_types.h"



class MyServiceIf {
 public:
  virtual ~MyServiceIf() {}
  virtual void ping() = 0;
  virtual void getRandomData(std::string& _return) = 0;
  virtual bool hasDataById(int64_t id) = 0;
  virtual void getDataById(std::string& _return, int64_t id) = 0;
  virtual void putDataById(int64_t id, const std::string& data) = 0;
  virtual void lobDataById(int64_t id, const std::string& data) = 0;
};

class MyServiceIfFactory {
 public:
  typedef MyServiceIf Handler;

  virtual ~MyServiceIfFactory() {}

  virtual MyServiceIf* getHandler(::apache::thrift::server::TConnectionContext* ctx) = 0;
  virtual void releaseHandler(MyServiceIf* /*handler*/) = 0;
};

class MyServiceIfSingletonFactory : virtual public MyServiceIfFactory {
 public:
  MyServiceIfSingletonFactory(const std::shared_ptr<MyServiceIf>& iface) : iface_(iface) {}
  virtual ~MyServiceIfSingletonFactory() {}

  virtual MyServiceIf* getHandler(::apache::thrift::server::TConnectionContext*) {
    return iface_.get();
  }
  virtual void releaseHandler(MyServiceIf* /*handler*/) {}

 protected:
  std::shared_ptr<MyServiceIf> iface_;
};

class MyServiceNull : virtual public MyServiceIf {
 public:
  virtual ~MyServiceNull() {}
  void ping() {
    return;
  }
  void getRandomData(std::string& /* _return */) {
    return;
  }
  bool hasDataById(int64_t /* id */) {
    bool _return = false;
    return _return;
  }
  void getDataById(std::string& /* _return */, int64_t /* id */) {
    return;
  }
  void putDataById(int64_t /* id */, const std::string& /* data */) {
    return;
  }
  void lobDataById(int64_t /* id */, const std::string& /* data */) {
    return;
  }
};

class MyService_ping_args final : public apache::thrift::TStructType<MyService_ping_args> {
 public:

  static const uint64_t _reflection_id = 16917139520594253004U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_ping_args() {
  }

  MyService_ping_args(const MyService_ping_args&) = default;
  MyService_ping_args& operator=(const MyService_ping_args& src)= default;
  MyService_ping_args(MyService_ping_args&&) = default;
  MyService_ping_args& operator=(MyService_ping_args&&) = default;

  void __clear();

  bool operator == (const MyService_ping_args &) const;
  bool operator != (const MyService_ping_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_ping_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_ping_args;
void merge(const MyService_ping_args& from, MyService_ping_args& to);
void merge(MyService_ping_args&& from, MyService_ping_args& to);
class MyService_ping_pargs final : public apache::thrift::TStructType<MyService_ping_pargs> {
 public:

  static const uint64_t _reflection_id = 16815395149953092012U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_ping_pargs() = default;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_ping_pargs;
void merge(const MyService_ping_pargs& from, MyService_ping_pargs& to);
void merge(MyService_ping_pargs&& from, MyService_ping_pargs& to);
class MyService_ping_presult final : public apache::thrift::TStructType<MyService_ping_presult> {
 public:

  static const uint64_t _reflection_id = 7454426369090387564U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_ping_presult() = default;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_ping_presult;
void merge(const MyService_ping_presult& from, MyService_ping_presult& to);
void merge(MyService_ping_presult&& from, MyService_ping_presult& to);
class MyService_getRandomData_args final : public apache::thrift::TStructType<MyService_getRandomData_args> {
 public:

  static const uint64_t _reflection_id = 15719605412501798860U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_getRandomData_args() {
  }

  MyService_getRandomData_args(const MyService_getRandomData_args&) = default;
  MyService_getRandomData_args& operator=(const MyService_getRandomData_args& src)= default;
  MyService_getRandomData_args(MyService_getRandomData_args&&) = default;
  MyService_getRandomData_args& operator=(MyService_getRandomData_args&&) = default;

  void __clear();

  bool operator == (const MyService_getRandomData_args &) const;
  bool operator != (const MyService_getRandomData_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_getRandomData_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_getRandomData_args;
void merge(const MyService_getRandomData_args& from, MyService_getRandomData_args& to);
void merge(MyService_getRandomData_args&& from, MyService_getRandomData_args& to);
class MyService_getRandomData_pargs final : public apache::thrift::TStructType<MyService_getRandomData_pargs> {
 public:

  static const uint64_t _reflection_id = 7557343870547663148U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_getRandomData_pargs() = default;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_getRandomData_pargs;
void merge(const MyService_getRandomData_pargs& from, MyService_getRandomData_pargs& to);
void merge(MyService_getRandomData_pargs&& from, MyService_getRandomData_pargs& to);
class MyService_getRandomData_presult final : public apache::thrift::TStructType<MyService_getRandomData_presult> {
 public:

  static const uint64_t _reflection_id = 11335342061983591980U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_getRandomData_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_getRandomData_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_getRandomData_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }
  std::string* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_getRandomData_presult;
void merge(const MyService_getRandomData_presult& from, MyService_getRandomData_presult& to);
void merge(MyService_getRandomData_presult&& from, MyService_getRandomData_presult& to);
class MyService_hasDataById_args final : public apache::thrift::TStructType<MyService_hasDataById_args> {
 public:

  static const uint64_t _reflection_id = 12544043904188382700U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_hasDataById_args() : id(0) {
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_hasDataById_args(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_hasDataById_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
    __isset.id = true;
  }

  MyService_hasDataById_args(const MyService_hasDataById_args&) = default;
  MyService_hasDataById_args& operator=(const MyService_hasDataById_args& src)= default;
  MyService_hasDataById_args(MyService_hasDataById_args&&) = default;
  MyService_hasDataById_args& operator=(MyService_hasDataById_args&&) = default;

  void __clear();
  int64_t id;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      id = false;
    }
    bool id;
  } __isset;

  bool operator == (const MyService_hasDataById_args &) const;
  bool operator != (const MyService_hasDataById_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_hasDataById_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_hasDataById_args;
void merge(const MyService_hasDataById_args& from, MyService_hasDataById_args& to);
void merge(MyService_hasDataById_args&& from, MyService_hasDataById_args& to);
class MyService_hasDataById_pargs final : public apache::thrift::TStructType<MyService_hasDataById_pargs> {
 public:

  static const uint64_t _reflection_id = 11103477756651294252U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_hasDataById_pargs() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_hasDataById_pargs(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_hasDataById_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
  }
  const int64_t* id;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_hasDataById_pargs;
void merge(const MyService_hasDataById_pargs& from, MyService_hasDataById_pargs& to);
void merge(MyService_hasDataById_pargs&& from, MyService_hasDataById_pargs& to);
class MyService_hasDataById_presult final : public apache::thrift::TStructType<MyService_hasDataById_presult> {
 public:

  static const uint64_t _reflection_id = 7676580259158416684U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_hasDataById_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_hasDataById_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_hasDataById_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }
  bool* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_hasDataById_presult;
void merge(const MyService_hasDataById_presult& from, MyService_hasDataById_presult& to);
void merge(MyService_hasDataById_presult&& from, MyService_hasDataById_presult& to);
class MyService_getDataById_args final : public apache::thrift::TStructType<MyService_getDataById_args> {
 public:

  static const uint64_t _reflection_id = 6402583257721468108U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_getDataById_args() : id(0) {
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_getDataById_args(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_getDataById_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
    __isset.id = true;
  }

  MyService_getDataById_args(const MyService_getDataById_args&) = default;
  MyService_getDataById_args& operator=(const MyService_getDataById_args& src)= default;
  MyService_getDataById_args(MyService_getDataById_args&&) = default;
  MyService_getDataById_args& operator=(MyService_getDataById_args&&) = default;

  void __clear();
  int64_t id;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      id = false;
    }
    bool id;
  } __isset;

  bool operator == (const MyService_getDataById_args &) const;
  bool operator != (const MyService_getDataById_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_getDataById_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_getDataById_args;
void merge(const MyService_getDataById_args& from, MyService_getDataById_args& to);
void merge(MyService_getDataById_args&& from, MyService_getDataById_args& to);
class MyService_getDataById_pargs final : public apache::thrift::TStructType<MyService_getDataById_pargs> {
 public:

  static const uint64_t _reflection_id = 10310703131271109740U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_getDataById_pargs() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_getDataById_pargs(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_getDataById_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
  }
  const int64_t* id;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_getDataById_pargs;
void merge(const MyService_getDataById_pargs& from, MyService_getDataById_pargs& to);
void merge(MyService_getDataById_pargs&& from, MyService_getDataById_pargs& to);
class MyService_getDataById_presult final : public apache::thrift::TStructType<MyService_getDataById_presult> {
 public:

  static const uint64_t _reflection_id = 8469747470745394316U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_getDataById_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_getDataById_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_getDataById_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }
  std::string* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_getDataById_presult;
void merge(const MyService_getDataById_presult& from, MyService_getDataById_presult& to);
void merge(MyService_getDataById_presult&& from, MyService_getDataById_presult& to);
class MyService_putDataById_args final : public apache::thrift::TStructType<MyService_putDataById_args> {
 public:

  static const uint64_t _reflection_id = 546042509371991564U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_putDataById_args() : id(0) {
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_putDataById_args(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_putDataById_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
    __isset.id = true;
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_putDataById_args(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_putDataById_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    data = arg.move();
    __isset.data = true;
  }

  MyService_putDataById_args(const MyService_putDataById_args&) = default;
  MyService_putDataById_args& operator=(const MyService_putDataById_args& src)= default;
  MyService_putDataById_args(MyService_putDataById_args&&) = default;
  MyService_putDataById_args& operator=(MyService_putDataById_args&&) = default;

  void __clear();
  int64_t id;
  std::string data;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      id = false;
      data = false;
    }
    bool id;
    bool data;
  } __isset;

  bool operator == (const MyService_putDataById_args &) const;
  bool operator != (const MyService_putDataById_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_putDataById_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_putDataById_args;
void merge(const MyService_putDataById_args& from, MyService_putDataById_args& to);
void merge(MyService_putDataById_args&& from, MyService_putDataById_args& to);
class MyService_putDataById_pargs final : public apache::thrift::TStructType<MyService_putDataById_pargs> {
 public:

  static const uint64_t _reflection_id = 9284081343717630892U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_putDataById_pargs() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_putDataById_pargs(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_putDataById_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_putDataById_pargs(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_putDataById_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    data = arg.move();
  }
  const int64_t* id;
  const std::string* data;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_putDataById_pargs;
void merge(const MyService_putDataById_pargs& from, MyService_putDataById_pargs& to);
void merge(MyService_putDataById_pargs&& from, MyService_putDataById_pargs& to);
class MyService_putDataById_presult final : public apache::thrift::TStructType<MyService_putDataById_presult> {
 public:

  static const uint64_t _reflection_id = 9940143875439151532U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_putDataById_presult() = default;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_putDataById_presult;
void merge(const MyService_putDataById_presult& from, MyService_putDataById_presult& to);
void merge(MyService_putDataById_presult&& from, MyService_putDataById_presult& to);
class MyService_lobDataById_args final : public apache::thrift::TStructType<MyService_lobDataById_args> {
 public:

  static const uint64_t _reflection_id = 15564732069918360876U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_lobDataById_args() : id(0) {
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_lobDataById_args(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_lobDataById_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
    __isset.id = true;
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_lobDataById_args(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_lobDataById_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    data = arg.move();
    __isset.data = true;
  }

  MyService_lobDataById_args(const MyService_lobDataById_args&) = default;
  MyService_lobDataById_args& operator=(const MyService_lobDataById_args& src)= default;
  MyService_lobDataById_args(MyService_lobDataById_args&&) = default;
  MyService_lobDataById_args& operator=(MyService_lobDataById_args&&) = default;

  void __clear();
  int64_t id;
  std::string data;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      id = false;
      data = false;
    }
    bool id;
    bool data;
  } __isset;

  bool operator == (const MyService_lobDataById_args &) const;
  bool operator != (const MyService_lobDataById_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_lobDataById_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_lobDataById_args;
void merge(const MyService_lobDataById_args& from, MyService_lobDataById_args& to);
void merge(MyService_lobDataById_args&& from, MyService_lobDataById_args& to);
class MyService_lobDataById_pargs final : public apache::thrift::TStructType<MyService_lobDataById_pargs> {
 public:

  static const uint64_t _reflection_id = 11737864613387025900U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  MyService_lobDataById_pargs() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_lobDataById_pargs(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_lobDataById_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit MyService_lobDataById_pargs(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    MyService_lobDataById_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    data = arg.move();
  }
  const int64_t* id;
  const std::string* data;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class MyService_lobDataById_pargs;
void merge(const MyService_lobDataById_pargs& from, MyService_lobDataById_pargs& to);
void merge(MyService_lobDataById_pargs&& from, MyService_lobDataById_pargs& to);
class MyServiceClient : virtual public MyServiceIf, virtual public apache::thrift::TClientBase {
 public:
  MyServiceClient(std::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  MyServiceClient(std::shared_ptr<apache::thrift::protocol::TProtocol> iprot, std::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  virtual ~MyServiceClient() {}
  void ping();
  virtual void send_ping();
  virtual void recv_ping();
  virtual folly::exception_wrapper recv_wrapped_ping();
  void getRandomData(std::string& _return);
  virtual void send_getRandomData();
  virtual void recv_getRandomData(std::string& _return);
  virtual folly::exception_wrapper recv_wrapped_getRandomData(std::string& _return);
  bool hasDataById(int64_t id);
  virtual void send_hasDataById(int64_t id);
  virtual bool recv_hasDataById();
  virtual folly::exception_wrapper recv_wrapped_hasDataById(bool& _return);
  void getDataById(std::string& _return, int64_t id);
  virtual void send_getDataById(int64_t id);
  virtual void recv_getDataById(std::string& _return);
  virtual folly::exception_wrapper recv_wrapped_getDataById(std::string& _return);
  void putDataById(int64_t id, const std::string& data);
  virtual void send_putDataById(int64_t id, const std::string& data);
  virtual void recv_putDataById();
  virtual folly::exception_wrapper recv_wrapped_putDataById();
  void lobDataById(int64_t id, const std::string& data);
  virtual void send_lobDataById(int64_t id, const std::string& data);
  apache::thrift::server::TConnectionContext* getConnectionContext() {
    return connectionContext_.get();
  }

  /**
   * Disable checking the seqid field in server responses.
   *
   * This should only be used with broken servers that return incorrect seqid values.
   */
  void _disableSequenceIdChecks() {
    checkSeqid_ = false;
  }

 protected:
  bool checkSeqid_;
  int32_t nextSendSequenceId_;
  int32_t nextRecvSequenceId_;
  int32_t getNextSendSequenceId();
  int32_t getNextRecvSequenceId();
  std::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<apache::thrift::server::TConnectionContext> connectionContext_;
  virtual const char* getServiceName();
};

class MyServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 public:
  virtual const char* getServiceName() {
    return "MyService";
  }
 protected:
  std::shared_ptr<MyServiceIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext);
 private:
  typedef  void (MyServiceProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, apache::thrift::server::TConnectionContext*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_getRandomData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_hasDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_getDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_putDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_lobDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
 public:
  MyServiceProcessor(std::shared_ptr<MyServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &MyServiceProcessor::process_ping;
    processMap_["getRandomData"] = &MyServiceProcessor::process_getRandomData;
    processMap_["hasDataById"] = &MyServiceProcessor::process_hasDataById;
    processMap_["getDataById"] = &MyServiceProcessor::process_getDataById;
    processMap_["putDataById"] = &MyServiceProcessor::process_putDataById;
    processMap_["lobDataById"] = &MyServiceProcessor::process_lobDataById;
  }

  virtual ~MyServiceProcessor() {}

  std::shared_ptr<std::set<std::string> > getProcessFunctions() { 
    std::shared_ptr<std::set<std::string> > rSet(new std::set<std::string>());
    rSet->insert("MyService.ping");
    rSet->insert("MyService.getRandomData");
    rSet->insert("MyService.hasDataById");
    rSet->insert("MyService.getDataById");
    rSet->insert("MyService.putDataById");
    rSet->insert("MyService.lobDataById");
    return rSet;
  }
};

class MyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MyServiceProcessorFactory(const ::std::shared_ptr< MyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(::apache::thrift::server::TConnectionContext* ctx);

 protected:
  ::std::shared_ptr< MyServiceIfFactory > handlerFactory_;
};

class MyServiceMultiface : virtual public MyServiceIf {
 public:
  MyServiceMultiface(std::vector<std::shared_ptr<MyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MyServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MyServiceIf> > ifaces_;
  MyServiceMultiface() {}
  void add(std::shared_ptr<MyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->ping();
    }
  }

  void getRandomData(std::string& _return) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->getRandomData(_return);
    }
  }

  bool hasDataById(int64_t id) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->hasDataById(id);
    }
    return ifaces_[thrift_multifaces_index_tmp_]->hasDataById(id);
  }

  void getDataById(std::string& _return, int64_t id) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->getDataById(_return, id);
    }
  }

  void putDataById(int64_t id, const std::string& data) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->putDataById(id, data);
    }
  }

  void lobDataById(int64_t id, const std::string& data) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->lobDataById(id, data);
    }
  }

};



#endif
