#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import thrift.py3.types
import thrift.py3.client
import typing as _typing
from types import TracebackType

import module.types as _module_types


_MyServiceT = _typing.TypeVar('_MyServiceT', bound='MyService')


class MyService(thrift.py3.client.Client):

    async def __aenter__(self: _MyServiceT) -> _MyServiceT: ...
    async def __aexit__(
        self,
        exc_type: _typing.Optional[_typing.Type[BaseException]],
        exc: _typing.Optional[BaseException],
        tb: _typing.Optional[TracebackType],
    ) -> _typing.Optional[bool]: ...

    def set_persistent_header(self, key: str, value: str) -> None: ...

    async def ping(
        self
    ) -> None: ...

    async def getRandomData(
        self
    ) -> str: ...

    async def hasDataById(
        self,
        id: int
    ) -> bool: ...

    async def getDataById(
        self,
        id: int
    ) -> str: ...

    async def putDataById(
        self,
        id: int,
        data: str
    ) -> None: ...

    async def lobDataById(
        self,
        id: int,
        data: str
    ) -> None: ...



_MyServiceFastT = _typing.TypeVar('_MyServiceFastT', bound='MyServiceFast')


class MyServiceFast(thrift.py3.client.Client):

    async def __aenter__(self: _MyServiceFastT) -> _MyServiceFastT: ...
    async def __aexit__(
        self,
        exc_type: _typing.Optional[_typing.Type[BaseException]],
        exc: _typing.Optional[BaseException],
        tb: _typing.Optional[TracebackType],
    ) -> _typing.Optional[bool]: ...

    def set_persistent_header(self, key: str, value: str) -> None: ...

    async def ping(
        self
    ) -> None: ...

    async def getRandomData(
        self
    ) -> str: ...

    async def hasDataById(
        self,
        id: int
    ) -> bool: ...

    async def getDataById(
        self,
        id: int
    ) -> str: ...

    async def putDataById(
        self,
        id: int,
        data: str
    ) -> None: ...

    async def lobDataById(
        self,
        id: int,
        data: str
    ) -> None: ...



_MyServiceEmptyT = _typing.TypeVar('_MyServiceEmptyT', bound='MyServiceEmpty')


class MyServiceEmpty(thrift.py3.client.Client):

    async def __aenter__(self: _MyServiceEmptyT) -> _MyServiceEmptyT: ...
    async def __aexit__(
        self,
        exc_type: _typing.Optional[_typing.Type[BaseException]],
        exc: _typing.Optional[BaseException],
        tb: _typing.Optional[TracebackType],
    ) -> _typing.Optional[bool]: ...

    def set_persistent_header(self, key: str, value: str) -> None: ...



_MyServicePrioParentT = _typing.TypeVar('_MyServicePrioParentT', bound='MyServicePrioParent')


class MyServicePrioParent(thrift.py3.client.Client):

    async def __aenter__(self: _MyServicePrioParentT) -> _MyServicePrioParentT: ...
    async def __aexit__(
        self,
        exc_type: _typing.Optional[_typing.Type[BaseException]],
        exc: _typing.Optional[BaseException],
        tb: _typing.Optional[TracebackType],
    ) -> _typing.Optional[bool]: ...

    def set_persistent_header(self, key: str, value: str) -> None: ...

    async def ping(
        self
    ) -> None: ...

    async def pong(
        self
    ) -> None: ...



_MyServicePrioChildT = _typing.TypeVar('_MyServicePrioChildT', bound='MyServicePrioChild')


class MyServicePrioChild(MyServicePrioParent):

    async def __aenter__(self: _MyServicePrioChildT) -> _MyServicePrioChildT: ...
    async def __aexit__(
        self,
        exc_type: _typing.Optional[_typing.Type[BaseException]],
        exc: _typing.Optional[BaseException],
        tb: _typing.Optional[TracebackType],
    ) -> _typing.Optional[bool]: ...

    def set_persistent_header(self, key: str, value: str) -> None: ...

    async def pang(
        self
    ) -> None: ...

