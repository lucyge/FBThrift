/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _apache_thrift_fixtures_types_SomeService_H
#define  _apache_thrift_fixtures_types_SomeService_H

#include <thrift/lib/cpp/TDispatchProcessor.h>
#include <folly/ExceptionWrapper.h>
#include "thrift/compiler/test/fixtures/types/gen-cpp/module_types.h"

namespace apache { namespace thrift { namespace fixtures { namespace types {

class SomeServiceIf {
 public:
  virtual ~SomeServiceIf() {}
  virtual void bounce_map( ::apache::thrift::fixtures::types::SomeMap& _return, const  ::apache::thrift::fixtures::types::SomeMap& m) = 0;
};

class SomeServiceIfFactory {
 public:
  typedef SomeServiceIf Handler;

  virtual ~SomeServiceIfFactory() {}

  virtual SomeServiceIf* getHandler(::apache::thrift::server::TConnectionContext* ctx) = 0;
  virtual void releaseHandler(SomeServiceIf* /*handler*/) = 0;
};

class SomeServiceIfSingletonFactory : virtual public SomeServiceIfFactory {
 public:
  SomeServiceIfSingletonFactory(const std::shared_ptr<SomeServiceIf>& iface) : iface_(iface) {}
  virtual ~SomeServiceIfSingletonFactory() {}

  virtual SomeServiceIf* getHandler(::apache::thrift::server::TConnectionContext*) {
    return iface_.get();
  }
  virtual void releaseHandler(SomeServiceIf* /*handler*/) {}

 protected:
  std::shared_ptr<SomeServiceIf> iface_;
};

class SomeServiceNull : virtual public SomeServiceIf {
 public:
  virtual ~SomeServiceNull() {}
  void bounce_map( ::apache::thrift::fixtures::types::SomeMap& /* _return */, const  ::apache::thrift::fixtures::types::SomeMap& /* m */) {
    return;
  }
};

class SomeService_bounce_map_args final : public apache::thrift::TStructType<SomeService_bounce_map_args> {
 public:

  static const uint64_t _reflection_id = 8067468913239303596U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  SomeService_bounce_map_args() {
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit SomeService_bounce_map_args(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    SomeService_bounce_map_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    m = arg.move();
    __isset.m = true;
  }

  SomeService_bounce_map_args(const SomeService_bounce_map_args&) = default;
  SomeService_bounce_map_args& operator=(const SomeService_bounce_map_args& src)= default;
  SomeService_bounce_map_args(SomeService_bounce_map_args&&) = default;
  SomeService_bounce_map_args& operator=(SomeService_bounce_map_args&&) = default;

  void __clear();
   ::apache::thrift::fixtures::types::SomeMap m;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      m = false;
    }
    bool m;
  } __isset;

  bool operator == (const SomeService_bounce_map_args &) const;
  bool operator != (const SomeService_bounce_map_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SomeService_bounce_map_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class SomeService_bounce_map_args;
void merge(const SomeService_bounce_map_args& from, SomeService_bounce_map_args& to);
void merge(SomeService_bounce_map_args&& from, SomeService_bounce_map_args& to);
class SomeService_bounce_map_pargs final : public apache::thrift::TStructType<SomeService_bounce_map_pargs> {
 public:

  static const uint64_t _reflection_id = 13692909882459418892U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  SomeService_bounce_map_pargs() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit SomeService_bounce_map_pargs(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    SomeService_bounce_map_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    m = arg.move();
  }
  const  ::apache::thrift::fixtures::types::SomeMap* m;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class SomeService_bounce_map_pargs;
void merge(const SomeService_bounce_map_pargs& from, SomeService_bounce_map_pargs& to);
void merge(SomeService_bounce_map_pargs&& from, SomeService_bounce_map_pargs& to);
class SomeService_bounce_map_presult final : public apache::thrift::TStructType<SomeService_bounce_map_presult> {
 public:

  static const uint64_t _reflection_id = 14908807508243143308U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  SomeService_bounce_map_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit SomeService_bounce_map_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    SomeService_bounce_map_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }
   ::apache::thrift::fixtures::types::SomeMap* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

class SomeService_bounce_map_presult;
void merge(const SomeService_bounce_map_presult& from, SomeService_bounce_map_presult& to);
void merge(SomeService_bounce_map_presult&& from, SomeService_bounce_map_presult& to);
class SomeServiceClient : virtual public SomeServiceIf, virtual public apache::thrift::TClientBase {
 public:
  SomeServiceClient(std::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  SomeServiceClient(std::shared_ptr<apache::thrift::protocol::TProtocol> iprot, std::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  virtual ~SomeServiceClient() {}
  void bounce_map( ::apache::thrift::fixtures::types::SomeMap& _return, const  ::apache::thrift::fixtures::types::SomeMap& m);
  virtual void send_bounce_map(const  ::apache::thrift::fixtures::types::SomeMap& m);
  virtual void recv_bounce_map( ::apache::thrift::fixtures::types::SomeMap& _return);
  virtual folly::exception_wrapper recv_wrapped_bounce_map( ::apache::thrift::fixtures::types::SomeMap& _return);
  apache::thrift::server::TConnectionContext* getConnectionContext() {
    return connectionContext_.get();
  }

  /**
   * Disable checking the seqid field in server responses.
   *
   * This should only be used with broken servers that return incorrect seqid values.
   */
  void _disableSequenceIdChecks() {
    checkSeqid_ = false;
  }

 protected:
  bool checkSeqid_;
  int32_t nextSendSequenceId_;
  int32_t nextRecvSequenceId_;
  int32_t getNextSendSequenceId();
  int32_t getNextRecvSequenceId();
  std::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<apache::thrift::server::TConnectionContext> connectionContext_;
  virtual const char* getServiceName();
};

class SomeServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 public:
  virtual const char* getServiceName() {
    return "SomeService";
  }
 protected:
  std::shared_ptr<SomeServiceIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext);
 private:
  typedef  void (SomeServiceProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, apache::thrift::server::TConnectionContext*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_bounce_map(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
 public:
  SomeServiceProcessor(std::shared_ptr<SomeServiceIf> iface) :
    iface_(iface) {
    processMap_["bounce_map"] = &SomeServiceProcessor::process_bounce_map;
  }

  virtual ~SomeServiceProcessor() {}

  std::shared_ptr<std::set<std::string> > getProcessFunctions() { 
    std::shared_ptr<std::set<std::string> > rSet(new std::set<std::string>());
    rSet->insert("SomeService.bounce_map");
    return rSet;
  }
};

class SomeServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SomeServiceProcessorFactory(const ::std::shared_ptr< SomeServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(::apache::thrift::server::TConnectionContext* ctx);

 protected:
  ::std::shared_ptr< SomeServiceIfFactory > handlerFactory_;
};

class SomeServiceMultiface : virtual public SomeServiceIf {
 public:
  SomeServiceMultiface(std::vector<std::shared_ptr<SomeServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SomeServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SomeServiceIf> > ifaces_;
  SomeServiceMultiface() {}
  void add(std::shared_ptr<SomeServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void bounce_map( ::apache::thrift::fixtures::types::SomeMap& _return, const  ::apache::thrift::fixtures::types::SomeMap& m) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->bounce_map(_return, m);
    }
  }

};

}}}} // namespace

#endif
