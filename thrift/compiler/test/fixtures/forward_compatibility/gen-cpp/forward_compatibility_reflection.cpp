/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/forward_compatibility/gen-cpp/forward_compatibility_reflection.h"
#include <thrift/lib/cpp/Reflection.h>

 namespace forward_compatibility_reflection_ {

// Reflection initializer for map<i16, double>
static void reflectionInitializer_11215703857575318891(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 11215703857575318891U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<i16, double>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 4U;
  dt.__isset.valueType = true;
  dt.valueType = 7U;
}

static void  reflectionInitializer_11215703857575318891(::apache::thrift::reflection::Schema&);  // map<i16, double>
// Reflection initializer for struct forward_compatibility.OldStructure
void reflectionInitializer_4131921941933986764(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 4131921941933986764U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct forward_compatibility.OldStructure";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 11215703857575318891U;
    f.name = "features";
    f.order = 0;
  }
  reflectionInitializer_11215703857575318891(schema);  // map<i16, double>
}

static void  reflectionInitializer_11215703857575318891(::apache::thrift::reflection::Schema&);  // map<i16, double>
// Reflection initializer for struct forward_compatibility.NewStructure
void reflectionInitializer_13282492778586199212(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 13282492778586199212U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct forward_compatibility.NewStructure";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 11215703857575318891U;
    f.name = "features";
    f.order = 0;
  }
  reflectionInitializer_11215703857575318891(schema);  // map<i16, double>
}

// Reflection initializer for map<i16, float>
static void reflectionInitializer_1113637803702309963(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 1113637803702309963U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<i16, float>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 4U;
  dt.__isset.valueType = true;
  dt.valueType = 15U;
}

static void  reflectionInitializer_1113637803702309963(::apache::thrift::reflection::Schema&);  // map<i16, float>
// Reflection initializer for struct forward_compatibility.NewStructure2
void reflectionInitializer_8404079032344701484(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 8404079032344701484U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct forward_compatibility.NewStructure2";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 1113637803702309963U;
    f.name = "features";
    f.order = 0;
  }
  reflectionInitializer_1113637803702309963(schema);  // map<i16, float>
}

static void  reflectionInitializer_1113637803702309963(::apache::thrift::reflection::Schema&);  // map<i16, float>
// Reflection initializer for list<map<i16, float>>
static void reflectionInitializer_9053610038315710217(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 9053610038315710217U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "list<map<i16, float>>";
  schema.names[dt.name] = id;
  dt.__isset.valueType = true;
  dt.valueType = 1113637803702309963U;
  reflectionInitializer_1113637803702309963(schema);  // map<i16, float>
}

static void  reflectionInitializer_1113637803702309963(::apache::thrift::reflection::Schema&);  // map<i16, float>
// Reflection initializer for map<i16, map<i16, float>>
static void reflectionInitializer_5837452780405839723(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 5837452780405839723U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<i16, map<i16, float>>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 4U;
  dt.__isset.valueType = true;
  dt.valueType = 1113637803702309963U;
  reflectionInitializer_1113637803702309963(schema);  // map<i16, float>
}

static void  reflectionInitializer_1113637803702309963(::apache::thrift::reflection::Schema&);  // map<i16, float>
// Reflection initializer for set<map<i16, float>>
static void reflectionInitializer_4366676126594811562(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 4366676126594811562U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "set<map<i16, float>>";
  schema.names[dt.name] = id;
  dt.__isset.valueType = true;
  dt.valueType = 1113637803702309963U;
  reflectionInitializer_1113637803702309963(schema);  // map<i16, float>
}

static void  reflectionInitializer_4366676126594811562(::apache::thrift::reflection::Schema&);  // set<map<i16, float>>
static void  reflectionInitializer_5837452780405839723(::apache::thrift::reflection::Schema&);  // map<i16, map<i16, float>>
static void  reflectionInitializer_9053610038315710217(::apache::thrift::reflection::Schema&);  // list<map<i16, float>>
// Reflection initializer for struct forward_compatibility.NewStructureNested
void reflectionInitializer_8209486072152767468(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 8209486072152767468U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct forward_compatibility.NewStructureNested";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 9053610038315710217U;
    f.name = "lst";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = true;
    f.type = 5837452780405839723U;
    f.name = "mp";
    f.order = 1;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[3];
    f.isRequired = true;
    f.type = 4366676126594811562U;
    f.name = "s";
    f.order = 2;
  }
  reflectionInitializer_4366676126594811562(schema);  // set<map<i16, float>>
  reflectionInitializer_5837452780405839723(schema);  // map<i16, map<i16, float>>
  reflectionInitializer_9053610038315710217(schema);  // list<map<i16, float>>
}

void  reflectionInitializer_8209486072152767468(::apache::thrift::reflection::Schema&);  // struct forward_compatibility.NewStructureNested
// Reflection initializer for struct forward_compatibility.NewStructureNestedField
void reflectionInitializer_5773853137915793324(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 5773853137915793324U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct forward_compatibility.NewStructureNestedField";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 8209486072152767468U;
    f.name = "f";
    f.order = 0;
  }
  reflectionInitializer_8209486072152767468(schema);  // struct forward_compatibility.NewStructureNested
}

}

