/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace some {
namespace valid {
namespace ns {
EmptyServiceClientWrapper::EmptyServiceClientWrapper(
    std::shared_ptr<some::valid::ns::EmptyServiceAsyncClient> async_client) : 
    async_client(async_client) {}

EmptyServiceClientWrapper::~EmptyServiceClientWrapper() {}

folly::Future<folly::Unit> EmptyServiceClientWrapper::disconnect() {
  return folly::via(
    this->async_client->getChannel()->getEventBase(),
    [this] { disconnectInLoop(); });
}

void EmptyServiceClientWrapper::disconnectInLoop() {
    async_client.reset();
}

void EmptyServiceClientWrapper::setPersistentHeader(const std::string& key, const std::string& value) {
    auto headerChannel = async_client->getHeaderChannel();
    if (headerChannel != nullptr) {
        headerChannel->setPersistentHeader(key, value);
    }
}



ReturnServiceClientWrapper::ReturnServiceClientWrapper(
    std::shared_ptr<some::valid::ns::ReturnServiceAsyncClient> async_client) : 
    async_client(async_client) {}

ReturnServiceClientWrapper::~ReturnServiceClientWrapper() {}

folly::Future<folly::Unit> ReturnServiceClientWrapper::disconnect() {
  return folly::via(
    this->async_client->getChannel()->getEventBase(),
    [this] { disconnectInLoop(); });
}

void ReturnServiceClientWrapper::disconnectInLoop() {
    async_client.reset();
}

void ReturnServiceClientWrapper::setPersistentHeader(const std::string& key, const std::string& value) {
    auto headerChannel = async_client->getHeaderChannel();
    if (headerChannel != nullptr) {
        headerChannel->setPersistentHeader(key, value);
    }
}


folly::Future<folly::Unit>
ReturnServiceClientWrapper::noReturn() {
 return async_client->future_noReturn(
 );
}

folly::Future<bool>
ReturnServiceClientWrapper::boolReturn() {
 return async_client->future_boolReturn(
 );
}

folly::Future<int16_t>
ReturnServiceClientWrapper::i16Return() {
 return async_client->future_i16Return(
 );
}

folly::Future<int32_t>
ReturnServiceClientWrapper::i32Return() {
 return async_client->future_i32Return(
 );
}

folly::Future<int64_t>
ReturnServiceClientWrapper::i64Return() {
 return async_client->future_i64Return(
 );
}

folly::Future<float>
ReturnServiceClientWrapper::floatReturn() {
 return async_client->future_floatReturn(
 );
}

folly::Future<double>
ReturnServiceClientWrapper::doubleReturn() {
 return async_client->future_doubleReturn(
 );
}

folly::Future<std::string>
ReturnServiceClientWrapper::stringReturn() {
 return async_client->future_stringReturn(
 );
}

folly::Future<std::string>
ReturnServiceClientWrapper::binaryReturn() {
 return async_client->future_binaryReturn(
 );
}

folly::Future<std::map<std::string,int64_t>>
ReturnServiceClientWrapper::mapReturn() {
 return async_client->future_mapReturn(
 );
}

folly::Future<int32_t>
ReturnServiceClientWrapper::simpleTypedefReturn() {
 return async_client->future_simpleTypedefReturn(
 );
}

folly::Future<std::vector<std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>>>
ReturnServiceClientWrapper::complexTypedefReturn() {
 return async_client->future_complexTypedefReturn(
 );
}

folly::Future<std::vector<std::vector<std::vector<std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>>>>>
ReturnServiceClientWrapper::list_mostComplexTypedefReturn() {
 return async_client->future_list_mostComplexTypedefReturn(
 );
}

folly::Future<some::valid::ns::MyEnumA>
ReturnServiceClientWrapper::enumReturn() {
 return async_client->future_enumReturn(
 );
}

folly::Future<std::vector<some::valid::ns::MyEnumA>>
ReturnServiceClientWrapper::list_EnumReturn() {
 return async_client->future_list_EnumReturn(
 );
}

folly::Future<some::valid::ns::MyStruct>
ReturnServiceClientWrapper::structReturn() {
 return async_client->future_structReturn(
 );
}

folly::Future<std::set<some::valid::ns::MyStruct>>
ReturnServiceClientWrapper::set_StructReturn() {
 return async_client->future_set_StructReturn(
 );
}

folly::Future<some::valid::ns::ComplexUnion>
ReturnServiceClientWrapper::unionReturn() {
 return async_client->future_unionReturn(
 );
}

folly::Future<std::vector<some::valid::ns::ComplexUnion>>
ReturnServiceClientWrapper::list_UnionReturn() {
 return async_client->future_list_UnionReturn(
 );
}

folly::Future<folly::IOBuf>
ReturnServiceClientWrapper::readDataEb(
    int64_t arg_size) {
 return async_client->future_readDataEb(
   arg_size
 );
}

folly::Future<std::unique_ptr<folly::IOBuf>>
ReturnServiceClientWrapper::readData(
    int64_t arg_size) {
 return async_client->future_readData(
   arg_size
 );
}


ParamServiceClientWrapper::ParamServiceClientWrapper(
    std::shared_ptr<some::valid::ns::ParamServiceAsyncClient> async_client) : 
    async_client(async_client) {}

ParamServiceClientWrapper::~ParamServiceClientWrapper() {}

folly::Future<folly::Unit> ParamServiceClientWrapper::disconnect() {
  return folly::via(
    this->async_client->getChannel()->getEventBase(),
    [this] { disconnectInLoop(); });
}

void ParamServiceClientWrapper::disconnectInLoop() {
    async_client.reset();
}

void ParamServiceClientWrapper::setPersistentHeader(const std::string& key, const std::string& value) {
    auto headerChannel = async_client->getHeaderChannel();
    if (headerChannel != nullptr) {
        headerChannel->setPersistentHeader(key, value);
    }
}


folly::Future<folly::Unit>
ParamServiceClientWrapper::void_ret_i16_param(
    int16_t arg_param1) {
 return async_client->future_void_ret_i16_param(
   arg_param1
 );
}

folly::Future<folly::Unit>
ParamServiceClientWrapper::void_ret_byte_i16_param(
    int8_t arg_param1, 
    int16_t arg_param2) {
 return async_client->future_void_ret_byte_i16_param(
   arg_param1,
   arg_param2
 );
}

folly::Future<folly::Unit>
ParamServiceClientWrapper::void_ret_map_param(
    std::map<std::string,int64_t> arg_param1) {
 return async_client->future_void_ret_map_param(
   arg_param1
 );
}

folly::Future<folly::Unit>
ParamServiceClientWrapper::void_ret_map_setlist_param(
    std::map<std::string,int64_t> arg_param1, 
    std::set<std::vector<std::string>> arg_param2) {
 return async_client->future_void_ret_map_setlist_param(
   arg_param1,
   arg_param2
 );
}

folly::Future<folly::Unit>
ParamServiceClientWrapper::void_ret_map_typedef_param(
    int32_t arg_param1) {
 return async_client->future_void_ret_map_typedef_param(
   arg_param1
 );
}

folly::Future<folly::Unit>
ParamServiceClientWrapper::void_ret_enum_param(
    some::valid::ns::MyEnumA arg_param1) {
 return async_client->future_void_ret_enum_param(
   arg_param1
 );
}

folly::Future<folly::Unit>
ParamServiceClientWrapper::void_ret_struct_param(
    some::valid::ns::MyStruct arg_param1) {
 return async_client->future_void_ret_struct_param(
   arg_param1
 );
}

folly::Future<folly::Unit>
ParamServiceClientWrapper::void_ret_listunion_param(
    std::vector<some::valid::ns::ComplexUnion> arg_param1) {
 return async_client->future_void_ret_listunion_param(
   arg_param1
 );
}

folly::Future<bool>
ParamServiceClientWrapper::bool_ret_i32_i64_param(
    int32_t arg_param1, 
    int64_t arg_param2) {
 return async_client->future_bool_ret_i32_i64_param(
   arg_param1,
   arg_param2
 );
}

folly::Future<bool>
ParamServiceClientWrapper::bool_ret_map_param(
    std::map<std::string,int64_t> arg_param1) {
 return async_client->future_bool_ret_map_param(
   arg_param1
 );
}

folly::Future<bool>
ParamServiceClientWrapper::bool_ret_union_param(
    some::valid::ns::ComplexUnion arg_param1) {
 return async_client->future_bool_ret_union_param(
   arg_param1
 );
}

folly::Future<int64_t>
ParamServiceClientWrapper::i64_ret_float_double_param(
    float arg_param1, 
    double arg_param2) {
 return async_client->future_i64_ret_float_double_param(
   arg_param1,
   arg_param2
 );
}

folly::Future<int64_t>
ParamServiceClientWrapper::i64_ret_string_typedef_param(
    std::string arg_param1, 
    std::set<std::vector<std::vector<std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>>>> arg_param2) {
 return async_client->future_i64_ret_string_typedef_param(
   arg_param1,
   arg_param2
 );
}

folly::Future<int64_t>
ParamServiceClientWrapper::i64_ret_i32_i32_i32_i32_i32_param(
    int32_t arg_param1, 
    int32_t arg_param2, 
    int32_t arg_param3, 
    int32_t arg_param4, 
    int32_t arg_param5) {
 return async_client->future_i64_ret_i32_i32_i32_i32_i32_param(
   arg_param1,
   arg_param2,
   arg_param3,
   arg_param4,
   arg_param5
 );
}

folly::Future<double>
ParamServiceClientWrapper::double_ret_setstruct_param(
    std::set<some::valid::ns::MyStruct> arg_param1) {
 return async_client->future_double_ret_setstruct_param(
   arg_param1
 );
}

folly::Future<std::string>
ParamServiceClientWrapper::string_ret_string_param(
    std::string arg_param1) {
 return async_client->future_string_ret_string_param(
   arg_param1
 );
}

folly::Future<std::string>
ParamServiceClientWrapper::binary_ret_binary_param(
    std::string arg_param1) {
 return async_client->future_binary_ret_binary_param(
   arg_param1
 );
}

folly::Future<std::map<std::string,int64_t>>
ParamServiceClientWrapper::map_ret_bool_param(
    bool arg_param1) {
 return async_client->future_map_ret_bool_param(
   arg_param1
 );
}

folly::Future<std::vector<bool>>
ParamServiceClientWrapper::list_ret_map_setlist_param(
    std::map<int32_t,std::vector<std::string>> arg_param1, 
    std::vector<std::string> arg_param2) {
 return async_client->future_list_ret_map_setlist_param(
   arg_param1,
   arg_param2
 );
}

folly::Future<std::map<std::set<std::vector<int32_t>>,std::map<std::vector<std::set<std::string>>,std::string>>>
ParamServiceClientWrapper::mapsetlistmapliststring_ret_listlistlist_param(
    std::vector<std::vector<std::vector<std::vector<int32_t>>>> arg_param1) {
 return async_client->future_mapsetlistmapliststring_ret_listlistlist_param(
   arg_param1
 );
}

folly::Future<int32_t>
ParamServiceClientWrapper::typedef_ret_i32_param(
    int32_t arg_param1) {
 return async_client->future_typedef_ret_i32_param(
   arg_param1
 );
}

folly::Future<std::vector<int32_t>>
ParamServiceClientWrapper::listtypedef_ret_typedef_param(
    std::vector<std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>> arg_param1) {
 return async_client->future_listtypedef_ret_typedef_param(
   arg_param1
 );
}

folly::Future<some::valid::ns::MyEnumA>
ParamServiceClientWrapper::enum_ret_double_param(
    double arg_param1) {
 return async_client->future_enum_ret_double_param(
   arg_param1
 );
}

folly::Future<some::valid::ns::MyEnumA>
ParamServiceClientWrapper::enum_ret_double_enum_param(
    double arg_param1, 
    some::valid::ns::MyEnumA arg_param2) {
 return async_client->future_enum_ret_double_enum_param(
   arg_param1,
   arg_param2
 );
}

folly::Future<std::vector<some::valid::ns::MyEnumA>>
ParamServiceClientWrapper::listenum_ret_map_param(
    std::map<std::string,int64_t> arg_param1) {
 return async_client->future_listenum_ret_map_param(
   arg_param1
 );
}

folly::Future<some::valid::ns::MyStruct>
ParamServiceClientWrapper::struct_ret_i16_param(
    int16_t arg_param1) {
 return async_client->future_struct_ret_i16_param(
   arg_param1
 );
}

folly::Future<std::set<some::valid::ns::MyStruct>>
ParamServiceClientWrapper::setstruct_ret_set_param(
    std::set<std::string> arg_param1) {
 return async_client->future_setstruct_ret_set_param(
   arg_param1
 );
}

folly::Future<some::valid::ns::ComplexUnion>
ParamServiceClientWrapper::union_ret_i32_i32_param(
    int32_t arg_param1, 
    int32_t arg_param2) {
 return async_client->future_union_ret_i32_i32_param(
   arg_param1,
   arg_param2
 );
}

folly::Future<std::vector<some::valid::ns::ComplexUnion>>
ParamServiceClientWrapper::listunion_string_param(
    std::string arg_param1) {
 return async_client->future_listunion_string_param(
   arg_param1
 );
}


} // namespace some
} // namespace valid
} // namespace ns
