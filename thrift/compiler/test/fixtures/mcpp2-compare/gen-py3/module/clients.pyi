#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import thrift.py3.types
import thrift.py3.client
import typing as _typing
from types import TracebackType

import module.types as _module_types
import includes.types as _includes_types


_EmptyServiceT = _typing.TypeVar('_EmptyServiceT', bound='EmptyService')


class EmptyService(thrift.py3.client.Client):

    async def __aenter__(self: _EmptyServiceT) -> _EmptyServiceT: ...
    async def __aexit__(
        self,
        exc_type: _typing.Optional[_typing.Type[BaseException]],
        exc: _typing.Optional[BaseException],
        tb: _typing.Optional[TracebackType],
    ) -> _typing.Optional[bool]: ...

    def set_persistent_header(self, key: str, value: str) -> None: ...



_ReturnServiceT = _typing.TypeVar('_ReturnServiceT', bound='ReturnService')


class ReturnService(thrift.py3.client.Client):

    async def __aenter__(self: _ReturnServiceT) -> _ReturnServiceT: ...
    async def __aexit__(
        self,
        exc_type: _typing.Optional[_typing.Type[BaseException]],
        exc: _typing.Optional[BaseException],
        tb: _typing.Optional[TracebackType],
    ) -> _typing.Optional[bool]: ...

    def set_persistent_header(self, key: str, value: str) -> None: ...

    async def noReturn(
        self
    ) -> None: ...

    async def boolReturn(
        self
    ) -> bool: ...

    async def i16Return(
        self
    ) -> int: ...

    async def i32Return(
        self
    ) -> int: ...

    async def i64Return(
        self
    ) -> int: ...

    async def floatReturn(
        self
    ) -> float: ...

    async def doubleReturn(
        self
    ) -> float: ...

    async def stringReturn(
        self
    ) -> str: ...

    async def binaryReturn(
        self
    ) -> bytes: ...

    async def mapReturn(
        self
    ) -> _typing.Mapping[str, int]: ...

    async def simpleTypedefReturn(
        self
    ) -> int: ...

    async def complexTypedefReturn(
        self
    ) -> _typing.Sequence[_typing.Mapping[_module_types.Empty, _module_types.MyStruct]]: ...

    async def list_mostComplexTypedefReturn(
        self
    ) -> _typing.Sequence[_typing.Sequence[_typing.Sequence[_typing.Mapping[_module_types.Empty, _module_types.MyStruct]]]]: ...

    async def enumReturn(
        self
    ) -> _module_types.MyEnumA: ...

    async def list_EnumReturn(
        self
    ) -> _typing.Sequence[_module_types.MyEnumA]: ...

    async def structReturn(
        self
    ) -> _module_types.MyStruct: ...

    async def set_StructReturn(
        self
    ) -> _typing.AbstractSet[_module_types.MyStruct]: ...

    async def unionReturn(
        self
    ) -> _module_types.ComplexUnion: ...

    async def list_UnionReturn(
        self
    ) -> _typing.Sequence[_module_types.ComplexUnion]: ...

    async def readDataEb(
        self,
        size: int
    ) -> bytes: ...

    async def readData(
        self,
        size: int
    ) -> bytes: ...



_ParamServiceT = _typing.TypeVar('_ParamServiceT', bound='ParamService')


class ParamService(thrift.py3.client.Client):

    async def __aenter__(self: _ParamServiceT) -> _ParamServiceT: ...
    async def __aexit__(
        self,
        exc_type: _typing.Optional[_typing.Type[BaseException]],
        exc: _typing.Optional[BaseException],
        tb: _typing.Optional[TracebackType],
    ) -> _typing.Optional[bool]: ...

    def set_persistent_header(self, key: str, value: str) -> None: ...

    async def void_ret_i16_param(
        self,
        param1: int
    ) -> None: ...

    async def void_ret_byte_i16_param(
        self,
        param1: int,
        param2: int
    ) -> None: ...

    async def void_ret_map_param(
        self,
        param1: _typing.Mapping[str, int]
    ) -> None: ...

    async def void_ret_map_setlist_param(
        self,
        param1: _typing.Mapping[str, int],
        param2: _typing.AbstractSet[_typing.Sequence[str]]
    ) -> None: ...

    async def void_ret_map_typedef_param(
        self,
        param1: int
    ) -> None: ...

    async def void_ret_enum_param(
        self,
        param1: _module_types.MyEnumA
    ) -> None: ...

    async def void_ret_struct_param(
        self,
        param1: _module_types.MyStruct
    ) -> None: ...

    async def void_ret_listunion_param(
        self,
        param1: _typing.Sequence[_module_types.ComplexUnion]
    ) -> None: ...

    async def bool_ret_i32_i64_param(
        self,
        param1: int,
        param2: int
    ) -> bool: ...

    async def bool_ret_map_param(
        self,
        param1: _typing.Mapping[str, int]
    ) -> bool: ...

    async def bool_ret_union_param(
        self,
        param1: _module_types.ComplexUnion
    ) -> bool: ...

    async def i64_ret_float_double_param(
        self,
        param1: float,
        param2: float
    ) -> int: ...

    async def i64_ret_string_typedef_param(
        self,
        param1: str,
        param2: _typing.AbstractSet[_typing.Sequence[_typing.Sequence[_typing.Mapping[_module_types.Empty, _module_types.MyStruct]]]]
    ) -> int: ...

    async def i64_ret_i32_i32_i32_i32_i32_param(
        self,
        param1: int,
        param2: int,
        param3: int,
        param4: int,
        param5: int
    ) -> int: ...

    async def double_ret_setstruct_param(
        self,
        param1: _typing.AbstractSet[_module_types.MyStruct]
    ) -> float: ...

    async def string_ret_string_param(
        self,
        param1: str
    ) -> str: ...

    async def binary_ret_binary_param(
        self,
        param1: bytes
    ) -> bytes: ...

    async def map_ret_bool_param(
        self,
        param1: bool
    ) -> _typing.Mapping[str, int]: ...

    async def list_ret_map_setlist_param(
        self,
        param1: _typing.Mapping[int, _typing.Sequence[str]],
        param2: _typing.Sequence[str]
    ) -> _typing.Sequence[bool]: ...

    async def mapsetlistmapliststring_ret_listlistlist_param(
        self,
        param1: _typing.Sequence[_typing.Sequence[_typing.Sequence[_typing.Sequence[int]]]]
    ) -> _typing.Mapping[_typing.AbstractSet[_typing.Sequence[int]], _typing.Mapping[_typing.Sequence[_typing.AbstractSet[str]], str]]: ...

    async def typedef_ret_i32_param(
        self,
        param1: int
    ) -> int: ...

    async def listtypedef_ret_typedef_param(
        self,
        param1: _typing.Sequence[_typing.Mapping[_module_types.Empty, _module_types.MyStruct]]
    ) -> _typing.Sequence[int]: ...

    async def enum_ret_double_param(
        self,
        param1: float
    ) -> _module_types.MyEnumA: ...

    async def enum_ret_double_enum_param(
        self,
        param1: float,
        param2: _module_types.MyEnumA
    ) -> _module_types.MyEnumA: ...

    async def listenum_ret_map_param(
        self,
        param1: _typing.Mapping[str, int]
    ) -> _typing.Sequence[_module_types.MyEnumA]: ...

    async def struct_ret_i16_param(
        self,
        param1: int
    ) -> _module_types.MyStruct: ...

    async def setstruct_ret_set_param(
        self,
        param1: _typing.AbstractSet[str]
    ) -> _typing.AbstractSet[_module_types.MyStruct]: ...

    async def union_ret_i32_i32_param(
        self,
        param1: int,
        param2: int
    ) -> _module_types.ComplexUnion: ...

    async def listunion_string_param(
        self,
        param1: str
    ) -> _typing.Sequence[_module_types.ComplexUnion]: ...

