/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace cpp2 {
NestedContainersClientWrapper::NestedContainersClientWrapper(
    std::shared_ptr<cpp2::NestedContainersAsyncClient> async_client) : 
    async_client(async_client) {}

NestedContainersClientWrapper::~NestedContainersClientWrapper() {}

folly::Future<folly::Unit> NestedContainersClientWrapper::disconnect() {
  return folly::via(
    this->async_client->getChannel()->getEventBase(),
    [this] { disconnectInLoop(); });
}

void NestedContainersClientWrapper::disconnectInLoop() {
    async_client.reset();
}

void NestedContainersClientWrapper::setPersistentHeader(const std::string& key, const std::string& value) {
    auto headerChannel = async_client->getHeaderChannel();
    if (headerChannel != nullptr) {
        headerChannel->setPersistentHeader(key, value);
    }
}


folly::Future<folly::Unit>
NestedContainersClientWrapper::mapList(
    std::map<int32_t,std::vector<int32_t>> arg_foo) {
 return async_client->future_mapList(
   arg_foo
 );
}

folly::Future<folly::Unit>
NestedContainersClientWrapper::mapSet(
    std::map<int32_t,std::set<int32_t>> arg_foo) {
 return async_client->future_mapSet(
   arg_foo
 );
}

folly::Future<folly::Unit>
NestedContainersClientWrapper::listMap(
    std::vector<std::map<int32_t,int32_t>> arg_foo) {
 return async_client->future_listMap(
   arg_foo
 );
}

folly::Future<folly::Unit>
NestedContainersClientWrapper::listSet(
    std::vector<std::set<int32_t>> arg_foo) {
 return async_client->future_listSet(
   arg_foo
 );
}

folly::Future<folly::Unit>
NestedContainersClientWrapper::turtles(
    std::vector<std::vector<std::map<int32_t,std::map<int32_t,std::set<int32_t>>>>> arg_foo) {
 return async_client->future_turtles(
   arg_foo
 );
}


} // namespace cpp2
