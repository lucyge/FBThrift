/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/optionals/gen-cpp2/module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace cpp2 {

} // cpp2
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Color::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->red);
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->green);
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->blue);
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alpha);
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Color::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Color");
  xfer += prot_->serializedFieldSize("red", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->red);
  xfer += prot_->serializedFieldSize("green", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->green);
  xfer += prot_->serializedFieldSize("blue", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->blue);
  xfer += prot_->serializedFieldSize("alpha", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->alpha);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Color::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Color");
  xfer += prot_->serializedFieldSize("red", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->red);
  xfer += prot_->serializedFieldSize("green", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->green);
  xfer += prot_->serializedFieldSize("blue", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->blue);
  xfer += prot_->serializedFieldSize("alpha", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->alpha);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Color::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Color");
  xfer += prot_->writeFieldBegin("red", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->red);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("green", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->green);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("blue", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->blue);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("alpha", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->writeDouble(this->alpha);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Vehicle::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::read(iprot, &this->color);
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          this->licensePlate = std::string();
          xfer += iprot->readString(this->licensePlate.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          this->description = std::string();
          xfer += iprot->readString(this->description.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          this->name = std::string();
          xfer += iprot->readString(this->name.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          this->hasAC = bool();
          xfer += iprot->readBool(this->hasAC.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Vehicle::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Vehicle");
  xfer += prot_->serializedFieldSize("color", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::serializedSize(prot_, &this->color);
  if (this->licensePlate.hasValue()) {
    xfer += prot_->serializedFieldSize("licensePlate", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->licensePlate.value());
  }
  if (this->description.hasValue()) {
    xfer += prot_->serializedFieldSize("description", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->description.value());
  }
  if (this->name.hasValue()) {
    xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->name.value());
  }
  if (this->hasAC.hasValue()) {
    xfer += prot_->serializedFieldSize("hasAC", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->serializedSizeBool(this->hasAC.value());
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Vehicle::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Vehicle");
  xfer += prot_->serializedFieldSize("color", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::serializedSizeZC(prot_, &this->color);
  if (this->licensePlate.hasValue()) {
    xfer += prot_->serializedFieldSize("licensePlate", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->licensePlate.value());
  }
  if (this->description.hasValue()) {
    xfer += prot_->serializedFieldSize("description", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->description.value());
  }
  if (this->name.hasValue()) {
    xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->name.value());
  }
  if (this->hasAC.hasValue()) {
    xfer += prot_->serializedFieldSize("hasAC", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->serializedSizeBool(this->hasAC.value());
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Vehicle::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Vehicle");
  xfer += prot_->writeFieldBegin("color", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::write(prot_, &this->color);
  xfer += prot_->writeFieldEnd();
  if (this->licensePlate.hasValue()) {
    xfer += prot_->writeFieldBegin("licensePlate", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->licensePlate.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->description.hasValue()) {
    xfer += prot_->writeFieldBegin("description", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeString(this->description.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->name.hasValue()) {
    xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeString(this->name.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->hasAC.hasValue()) {
    xfer += prot_->writeFieldBegin("hasAC", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->writeBool(this->hasAC.value());
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t Person::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          this->age = int16_t();
          xfer += iprot->readI16(this->age.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          this->address = std::string();
          xfer += iprot->readString(this->address.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          this->favoriteColor =  ::cpp2::Color();
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::read(iprot, &this->favoriteColor.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->friends = std::set< ::cpp2::PersonID>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set< ::cpp2::PersonID>>::read(*iprot, this->friends.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          this->bestFriend = int64_t();
          xfer += iprot->readI64(this->bestFriend.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->petNames = std::map< ::cpp2::Animal, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>, std::map< ::cpp2::Animal, std::string>>::read(*iprot, this->petNames.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->afraidOfAnimal =  ::cpp2::Animal();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::Animal>::read(*iprot, this->afraidOfAnimal.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->vehicles = std::vector< ::cpp2::Vehicle>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Vehicle>>::read(*iprot, this->vehicles.value());
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Person::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Person");
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->id);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->name);
  if (this->age.hasValue()) {
    xfer += prot_->serializedFieldSize("age", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->age.value());
  }
  if (this->address.hasValue()) {
    xfer += prot_->serializedFieldSize("address", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->address.value());
  }
  if (this->favoriteColor.hasValue()) {
    xfer += prot_->serializedFieldSize("favoriteColor", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::serializedSize(prot_, &this->favoriteColor.value());
  }
  if (this->friends.hasValue()) {
    xfer += prot_->serializedFieldSize("friends", apache::thrift::protocol::T_SET, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set< ::cpp2::PersonID>>::serializedSize<false>(*prot_, this->friends.value());
  }
  if (this->bestFriend.hasValue()) {
    xfer += prot_->serializedFieldSize("bestFriend", apache::thrift::protocol::T_I64, 7);
    xfer += prot_->serializedSizeI64(this->bestFriend.value());
  }
  if (this->petNames.hasValue()) {
    xfer += prot_->serializedFieldSize("petNames", apache::thrift::protocol::T_MAP, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>, std::map< ::cpp2::Animal, std::string>>::serializedSize<false>(*prot_, this->petNames.value());
  }
  if (this->afraidOfAnimal.hasValue()) {
    xfer += prot_->serializedFieldSize("afraidOfAnimal", apache::thrift::protocol::T_I32, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::Animal>::serializedSize<false>(*prot_, this->afraidOfAnimal.value());
  }
  if (this->vehicles.hasValue()) {
    xfer += prot_->serializedFieldSize("vehicles", apache::thrift::protocol::T_LIST, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Vehicle>>::serializedSize<false>(*prot_, this->vehicles.value());
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Person::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Person");
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->id);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->name);
  if (this->age.hasValue()) {
    xfer += prot_->serializedFieldSize("age", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->age.value());
  }
  if (this->address.hasValue()) {
    xfer += prot_->serializedFieldSize("address", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->address.value());
  }
  if (this->favoriteColor.hasValue()) {
    xfer += prot_->serializedFieldSize("favoriteColor", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::serializedSizeZC(prot_, &this->favoriteColor.value());
  }
  if (this->friends.hasValue()) {
    xfer += prot_->serializedFieldSize("friends", apache::thrift::protocol::T_SET, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set< ::cpp2::PersonID>>::serializedSize<false>(*prot_, this->friends.value());
  }
  if (this->bestFriend.hasValue()) {
    xfer += prot_->serializedFieldSize("bestFriend", apache::thrift::protocol::T_I64, 7);
    xfer += prot_->serializedSizeI64(this->bestFriend.value());
  }
  if (this->petNames.hasValue()) {
    xfer += prot_->serializedFieldSize("petNames", apache::thrift::protocol::T_MAP, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>, std::map< ::cpp2::Animal, std::string>>::serializedSize<false>(*prot_, this->petNames.value());
  }
  if (this->afraidOfAnimal.hasValue()) {
    xfer += prot_->serializedFieldSize("afraidOfAnimal", apache::thrift::protocol::T_I32, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::Animal>::serializedSize<false>(*prot_, this->afraidOfAnimal.value());
  }
  if (this->vehicles.hasValue()) {
    xfer += prot_->serializedFieldSize("vehicles", apache::thrift::protocol::T_LIST, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Vehicle>>::serializedSize<false>(*prot_, this->vehicles.value());
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Person::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Person");
  xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  if (this->age.hasValue()) {
    xfer += prot_->writeFieldBegin("age", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->age.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->address.hasValue()) {
    xfer += prot_->writeFieldBegin("address", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeString(this->address.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->favoriteColor.hasValue()) {
    xfer += prot_->writeFieldBegin("favoriteColor", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::write(prot_, &this->favoriteColor.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->friends.hasValue()) {
    xfer += prot_->writeFieldBegin("friends", apache::thrift::protocol::T_SET, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set< ::cpp2::PersonID>>::write(*prot_, this->friends.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->bestFriend.hasValue()) {
    xfer += prot_->writeFieldBegin("bestFriend", apache::thrift::protocol::T_I64, 7);
    xfer += prot_->writeI64(this->bestFriend.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->petNames.hasValue()) {
    xfer += prot_->writeFieldBegin("petNames", apache::thrift::protocol::T_MAP, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>, std::map< ::cpp2::Animal, std::string>>::write(*prot_, this->petNames.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->afraidOfAnimal.hasValue()) {
    xfer += prot_->writeFieldBegin("afraidOfAnimal", apache::thrift::protocol::T_I32, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::Animal>::write(*prot_, this->afraidOfAnimal.value());
    xfer += prot_->writeFieldEnd();
  }
  if (this->vehicles.hasValue()) {
    xfer += prot_->writeFieldBegin("vehicles", apache::thrift::protocol::T_LIST, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Vehicle>>::write(*prot_, this->vehicles.value());
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
