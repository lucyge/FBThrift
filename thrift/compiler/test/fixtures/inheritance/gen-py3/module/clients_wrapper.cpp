/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace cpp2 {
MyRootClientWrapper::MyRootClientWrapper(
    std::shared_ptr<cpp2::MyRootAsyncClient> async_client) : 
    async_client(async_client) {}

MyRootClientWrapper::~MyRootClientWrapper() {}

folly::Future<folly::Unit> MyRootClientWrapper::disconnect() {
  return folly::via(
    this->async_client->getChannel()->getEventBase(),
    [this] { disconnectInLoop(); });
}

void MyRootClientWrapper::disconnectInLoop() {
    async_client.reset();
}

void MyRootClientWrapper::setPersistentHeader(const std::string& key, const std::string& value) {
    auto headerChannel = async_client->getHeaderChannel();
    if (headerChannel != nullptr) {
        headerChannel->setPersistentHeader(key, value);
    }
}


folly::Future<folly::Unit>
MyRootClientWrapper::do_root() {
 return async_client->future_do_root(
 );
}


MyNodeClientWrapper::MyNodeClientWrapper(
    std::shared_ptr<cpp2::MyNodeAsyncClient> async_client) : 
    MyRootClientWrapper(async_client),
    async_client(async_client) {}


folly::Future<folly::Unit> MyNodeClientWrapper::disconnect() {
  return folly::via(
    this->async_client->getChannel()->getEventBase(),
    [this] { disconnectInLoop(); });
}

void MyNodeClientWrapper::disconnectInLoop() {
    async_client.reset();
    cpp2::MyRootClientWrapper::disconnectInLoop();
}



folly::Future<folly::Unit>
MyNodeClientWrapper::do_mid() {
 return async_client->future_do_mid(
 );
}


MyLeafClientWrapper::MyLeafClientWrapper(
    std::shared_ptr<cpp2::MyLeafAsyncClient> async_client) : 
    MyNodeClientWrapper(async_client),
    async_client(async_client) {}


folly::Future<folly::Unit> MyLeafClientWrapper::disconnect() {
  return folly::via(
    this->async_client->getChannel()->getEventBase(),
    [this] { disconnectInLoop(); });
}

void MyLeafClientWrapper::disconnectInLoop() {
    async_client.reset();
    cpp2::MyNodeClientWrapper::disconnectInLoop();
}



folly::Future<folly::Unit>
MyLeafClientWrapper::do_leaf() {
 return async_client->future_do_leaf(
 );
}


} // namespace cpp2
