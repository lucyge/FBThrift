<%!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%>auto request = callback->getRequest();
auto thriftRequest = static_cast<apache::thrift::ThriftRequest*>(request);
auto _channel = std::dynamic_pointer_cast<apache::thrift::StreamThriftChannelBase>(thriftRequest->getChannel());
apache::thrift::detail::si::async_tm_oneway(
    this, std::move(callback), [&, this] {
      <%#function:takes_stream?%>
      auto _input = yarpl::flowable::Flowables::fromPublisher<
          std::unique_ptr<folly::IOBuf>>(
          [_channel](yarpl::Reference<yarpl::flowable::Subscriber<
                        std::unique_ptr<folly::IOBuf>>> subscriber) {
            _channel->setInput(0, subscriber);
          });
      auto _mappedInput =
          _input->map([](std::unique_ptr<folly::IOBuf> buffer) {
            using codec = apache::thrift::CompactSerializer;
            return codec::deserialize<<%#type:streamElemType%><% > types/type %><%/type:streamElemType%>>(buffer.get());
          });
      <%/function:takes_stream?%>
      <%^function:returns_stream?%>
      <%function:name%>(std::move(_mappedInput)<%function:comma_nostream%><% > service_common/param_list_without_streams_move %>);
      <%/function:returns_stream?%>
      <%#function:returns_stream?%>
      folly::exception_wrapper _ew;
      try {
        <%#function:takes_stream?%>
        auto _result = <%function:name%>(std::move(_mappedInput)<%function:comma_nostream%><% > service_common/param_list_without_streams_move %>);
        <%/function:takes_stream?%>
        <%^function:takes_stream?%>
        auto _result = <%function:name%>(<% > service_common/param_list_move %>);
        <%/function:takes_stream?%>
        if (!_result) {
          _ew = folly::make_exception_wrapper<
              apache::thrift::TApplicationException>(
              apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT,
              "User defined stream returning function should not return nullptr");
        } else {
          auto _mappedOutput = _result->map([](const <%#type:streamElemType%><% > types/type %><%/type:streamElemType%>& item) {
            using codec = apache::thrift::CompactSerializer;
            return codec::serialize<folly::IOBufQueue>(item).move();
          });
          auto _subscriber = _channel->getOutput(0);
          _mappedOutput->subscribe(_subscriber);
        }
      } catch (const apache::thrift::TApplicationException& ex) {
        _ew = ex;
      } catch (const std::exception& ex) {
        _ew = folly::make_exception_wrapper<
            apache::thrift::TApplicationException>(
            apache::thrift::TApplicationException::TApplicationExceptionType::
                UNKNOWN,
            folly::exceptionStr(ex).toStdString());
      }
      if (_ew) {
        auto _subscriber = _channel->getOutput(0);
        _subscriber->onSubscribe(yarpl::flowable::Subscription::empty());
        _subscriber->onError(_ew);
      }
      <%/function:returns_stream?%>
    });
