{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

Generates a top-level file to be imported in the user's client code.

The generated file is pretty big, but the bulk of the generation is done inside
the clients/Callbacks partial.

}}
{{> common/AutoGeneratedPy}}
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector as vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref, typeid
from cpython.ref cimport PyObject
from thrift.py3.client cimport cRequestChannel_ptr, makeClientWrapper
from thrift.py3.exceptions cimport try_make_shared_exception, raise_py_exception
from folly cimport cFollyTry, cFollyUnit, c_unit
from libcpp.typeinfo cimport type_info
import thrift.py3.types
cimport thrift.py3.types
import thrift.py3.client
cimport thrift.py3.client
from folly.futures cimport bridgeFutureWith
from folly.executor cimport get_executor
cimport cython

import asyncio
import sys

cimport {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.types as _{{#program:py3Namespaces}}{{value}}_{{/program:py3Namespaces}}{{program:name}}_types
import {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.types as _{{#program:py3Namespaces}}{{value}}_{{/program:py3Namespaces}}{{program:name}}_types
{{#program:includeNamespaces}}
{{#hasTypes?}}
cimport {{#includeNamespace}}{{value}}.{{/includeNamespace}}types as _{{#includeNamespace}}{{value}}_{{/includeNamespace}}types
import {{#includeNamespace}}{{value}}.{{/includeNamespace}}types as _{{#includeNamespace}}{{value}}_{{/includeNamespace}}types
{{/hasTypes?}}
{{#hasServices?}}
cimport {{#includeNamespace}}{{value}}.{{/includeNamespace}}clients as _{{#includeNamespace}}{{value}}_{{/includeNamespace}}clients
import {{#includeNamespace}}{{value}}.{{/includeNamespace}}clients as _{{#includeNamespace}}{{value}}_{{/includeNamespace}}clients
{{/hasServices?}}
{{/program:includeNamespaces}}

{{#program:services}}
from {{#program:py3Namespaces}}{{value}}.{{/program:py3Namespaces}}{{program:name}}.clients_wrapper cimport c{{service:name}}AsyncClient, c{{service:name}}ClientWrapper
{{#service:extends}}
{{#service:externalProgram?}}
from {{#service:py3Namespaces}}{{value}}.{{/service:py3Namespaces}}{{service:programName}}.clients_wrapper cimport c{{service:name}}ClientWrapper
{{/service:externalProgram?}}
{{/service:extends}}
{{/program:services}}

{{> clients/Callbacks}}

{{#program:services}}
cdef class {{service:name}}({{#service:extends}}{{#service:externalProgram?}}{{!
    }}_{{#service:py3Namespaces}}{{value}}_{{/service:py3Namespaces}}{{!
    }}{{service:programName}}_clients.{{/service:externalProgram?}}{{service:name}}{{!
  }}{{/service:extends}}{{^service:extends?}}thrift.py3.client.Client{{/service:extends?}}):

    def __cinit__({{service:name}} self):
        loop = asyncio.get_event_loop()
        self._deferred_headers = {}
        self._connect_future = loop.create_future()
        self._executor = get_executor()

    cdef const type_info* _typeid({{service:name}} self):
        return &typeid(c{{service:name}}AsyncClient)

    @staticmethod
    cdef _{{program:name}}_{{service:name}}_set_client({{service:name}} inst, shared_ptr[c{{service:name}}ClientWrapper] c_obj):
        """So the class hierarchy talks to the correct pointer type"""
        inst._{{program:name}}_{{service:name}}_client = c_obj
{{#service:extends}}
        {{#service:externalProgram?}}_{{#service:py3Namespaces}}{{value}}_{{/service:py3Namespaces}}{{service:programName}}_clients.{{/service:externalProgram?}}{{service:name}}._{{service:programName}}_{{service:name}}_set_client(inst, <shared_ptr[c{{service:name}}ClientWrapper]>c_obj)
{{/service:extends}}

    cdef _{{program:name}}_{{service:name}}_reset_client({{service:name}} self):
        """So the class hierarchy resets the shared pointer up the chain"""
        self._{{program:name}}_{{service:name}}_client.reset()
{{#service:extends}}
        {{#service:externalProgram?}}_{{#service:py3Namespaces}}{{value}}_{{/service:py3Namespaces}}{{service:programName}}_clients.{{/service:externalProgram?}}{{service:name}}._{{service:programName}}_{{service:name}}_reset_client(self)
{{/service:extends}}

    def __dealloc__({{service:name}} self):
        if self._cRequestChannel or self._{{program:name}}_{{service:name}}_client:
            print('client was not cleaned up, use the context manager', file=sys.stderr)

    async def __aenter__({{service:name}} self):
        await self._connect_future
        if self._cRequestChannel:
            {{service:name}}._{{program:name}}_{{service:name}}_set_client(
                self,
                makeClientWrapper[c{{service:name}}AsyncClient, c{{service:name}}ClientWrapper](
                    self._cRequestChannel
                ),
            )
            self._cRequestChannel.reset()
        else:
            raise asyncio.InvalidStateError('Client context has been used already')
        {{!Replay setting persistent_headers after the C++ client is ready}}
        for key, value in self._deferred_headers.items():
            self.set_persistent_header(key, value)
        self._deferred_headers = None
        return self

    async def __aexit__({{service:name}} self, *exc):
        self._check_connect_future()
        loop = asyncio.get_event_loop()
        future = loop.create_future()
        bridgeFutureWith[cFollyUnit](
            self._executor,
            deref(self._{{program:name}}_{{service:name}}_client).disconnect(),
            closed_{{service:name}}_py3_client_callback,
            <PyObject *>future
        )
        # To break any future usage of this client
        badfuture = loop.create_future()
        badfuture.set_exception(asyncio.InvalidStateError('Client Out of Context'))
        {{! We do this to make sure this exception was recieved by someone}}
        badfuture.exception()
        {{! All calls to the client will now raise}}
        self._connect_future = badfuture
        await future
        self._{{program:name}}_{{service:name}}_reset_client()

    def set_persistent_header({{service:name}} self, str key, str value):
        {{! If we are called before aenter then save the header for later}}
        if not self._{{program:name}}_{{service:name}}_client:
            self._deferred_headers[key] = value
            return

        cdef string ckey = <bytes> key.encode('utf-8')
        cdef string cvalue = <bytes> value.encode('utf-8')
        deref(self._{{program:name}}_{{service:name}}_client).setPersistentHeader(ckey, cvalue)

    {{#service:functions}}
    @cython.always_allow_keywords(True)
    async def {{function:name}}(
            {{service:name}} self{{#function:args}},
            {{#field:type}}{{!
                }}{{#type:hasCythonType?}}{{^type:integer?}}{{> types/CythonPythonType}} {{/type:integer?}}{{/type:hasCythonType?}}{{!
                }}{{field:name}}{{#type:integer?}} not None{{/type:integer?}}{{^type:number?}} not None{{/type:number?}}{{!
            }}{{/field:type}}{{/function:args}}
    ):
        {{#function:args}}
        {{#field:type}}
        {{#type:container?}}
        if not isinstance({{field:name}}, {{> types/PythonType}}):
            {{field:name}} = {{> types/PythonType}}({{field:name}})
        {{/type:container?}}
        {{#type:enum?}}
        if not isinstance({{field:name}}, {{> types/PythonType}}):
            raise TypeError(f'argument {{field:name}} value: { {{field:name}} !r} is not of the enum type { {{> types/PythonType}} }.')
        {{/type:enum?}}
        {{#type:integer?}}
        if not isinstance({{field:name}}, int):
            raise TypeError(f'{{field:name}} is not a {int !r}.')
        else:
            {{! inject cython int Overflow checks }}
            <{{> types/CythonPythonType}}> {{field:name}}
        {{/type:integer?}}
        {{/field:type}}
        {{/function:args}}
        self._check_connect_future()
        __loop = asyncio.get_event_loop()
        __future = __loop.create_future()
        bridgeFutureWith[{{#function:returnType}}{{> types/CythonCppType}}{{/function:returnType}}](
            self._executor,
            deref(self._{{program:name}}_{{service:name}}_client).{{function:name}}({{#function:args}}
                {{#field:type}}{{> CythonPythonToCppArg}}{{/field:type}},{{/function:args}}
            ),
            {{service:name}}_{{function:name}}_callback,
            <PyObject *> __future
        )
        return await __future

    {{/service:functions}}


cdef void closed_{{service:name}}_py3_client_callback(
    cFollyTry[cFollyUnit]&& result,
    PyObject* fut,
):
    cdef object pyfuture = <object> fut
    pyfuture.set_result(None)
{{/program:services}}
