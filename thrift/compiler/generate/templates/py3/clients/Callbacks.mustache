{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

Included from CythonClients.pyx, this file defines the core adapter between the
C++ async future calls and Python asyncio futures. The C++ classes defined in
ClientsWrapper.h and ClientsWrapper.cpp take these callbacks and call into them
from the IO thread. The callbacks examine the result, extract the exception if
one occurred, and then schedule setting the result on the future to be safely
executed in the asyncio loop.

}}

{{#program:services}}
{{#service:functions}}
cdef void {{service:name}}_{{function:name}}_callback(
    cFollyTry[{{#function:returnType}}{{> types/CythonCppType}}{{/function:returnType}}]&& result,
    PyObject* future
):
    cdef object pyfuture = <object> future
    if {{#function:exceptions}}{{!
    }}result.hasException[{{#field:type}}{{> types/CythonCppType}}{{/field:type}}]():
        {{#field:type}}pyfuture.set_exception({{!
        }}{{> types/CythonPythonType}}.create({{!
        }}try_make_shared_exception[{{> types/CythonCppType}}](result.exception()){{!
        }})){{/field:type}}
    elif {{/function:exceptions}}{{!
    }}result.hasException():
        try:
            raise_py_exception(result.exception())
        except Exception as ex:
            pyfuture.set_exception(ex)
    else:
        try:
            pyfuture.set_result({{#function:returnType}}{{> clients/CythonCppValueToReturnValue}}{{/function:returnType}})
        except Exception as ex:
            pyfuture.set_exception(ex)

{{/service:functions}}
{{/program:services}}
