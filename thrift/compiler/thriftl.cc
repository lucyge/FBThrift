#line 1 "/home/hemant/fbthrift/thrift/compiler/thriftl.cc"

#line 3 "/home/hemant/fbthrift/thrift/compiler/thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[676] =
    {   0,
        1,    1,  142,  140,    1,    1,  140,    5,  140,    8,
      134,  134,  140,  140,  132,  132,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,    6,    7,    1,    0,  137,
        5,    0,  138,    0,  134,  132,    0,  136,  136,  134,
      132,  136,  134,    0,    4,  131,    0,  132,  135,  135,
        0,  136,  134,  135,  135,  135,  135,  135,  135,  135,
       60,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,   73,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,   86,
      135,   89,   94,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  100,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  134,  134,  132,  134,    0,    0,    4,  133,
      135,  135,  135,  135,  135,   58,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,   69,   71,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,   81,  135,  135,  135,  135,

      135,   29,   30,   31,  135,  135,  135,  135,   90,  135,
      135,  135,  135,   37,  135,  135,   98,   99,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,   40,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  119,  135,
      135,  135,  121,  135,  135,  135,  135,  135,  135,    0,
        0,    0,    0,    0,    2,  135,  135,  135,  135,  135,
       59,  135,  135,   62,  135,   27,  135,   28,   64,   65,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,   74,   75,   52,  135,   78,  135,  135,  135,  135,

      135,  135,  135,   85,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,   39,   96,  135,  135,  135,  135,
      101,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  116,  135,  135,   10,
      135,  135,  135,  135,   26,  135,  135,  125,  135,    0,
        0,    3,    0,    0,    0,    0,    2,  135,  129,  135,
      135,  135,  135,   56,  135,   63,   66,  135,  135,   53,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,    9,  135,   33,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  103,  135,  135,  135,  135,
      106,  135,  135,  135,  135,  135,  109,  135,  135,   36,
      135,  135,  135,  135,  135,  135,  135,  135,  117,  135,
      135,   46,  135,  135,  135,  124,  126,    0,    3,    0,
      139,    0,    2,  128,  127,  135,  135,   61,   35,  135,
      135,  135,  135,  135,  135,  135,  135,  135,   72,   32,
       76,   77,  135,   79,  135,  135,  135,   84,  135,  135,
      135,  135,   88,  135,   91,  135,  135,  135,   95,  135,
       97,   43,  135,  135,  135,  135,  135,  102,  135,  135,

      135,  108,  135,  135,  110,  111,  135,  112,   42,   34,
       45,  113,  135,  135,   50,  135,  135,  135,  135,  135,
      139,  135,  135,    0,  135,  135,  135,  135,  135,  135,
       68,   70,  135,   48,   80,   82,  135,  135,  135,  135,
      135,   25,  135,  135,  135,  135,  135,  135,  135,  104,
      135,  135,  135,  135,  135,   51,  135,  135,  135,  135,
       44,  135,  122,  135,  135,   57,    0,  135,   67,  135,
      135,   15,  135,  135,   83,   38,   41,  135,  135,  135,
      135,  135,  135,   55,  135,  135,  135,  135,  107,   54,
      135,  135,  135,  115,  135,  120,  123,  130,    0,  135,

      135,  135,  135,   47,  135,  135,  135,   93,  135,   11,
      135,  135,  105,   20,  135,  135,  135,  118,    0,  135,
      135,  135,  135,   14,   87,   92,  135,  135,  135,  135,
      135,  135,    0,  135,   13,  135,  135,  135,  135,  135,
      135,  135,  135,  135,    0,   17,  135,  135,   16,   21,
      135,  135,  135,  135,  114,   49,   12,  135,   19,  135,
      135,  135,  135,   22,  135,  135,  135,  135,  135,   18,
      135,   24,  135,   23,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    7,    8,
        8,    9,   10,    8,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   19,   21,   21,    8,    8,    8,
        8,    8,    1,    1,   22,   22,   23,   22,   24,   25,
       26,   26,   27,   26,   26,   26,   26,   26,   28,   29,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        8,    1,    8,    1,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,    1,   58,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[59] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    7,    7,    8,    7,    9,    9,    9,    9,    9,
        7,    7,    7,    7,    8,    7,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    1,    1
    } ;

static const flex_int16_t yy_base[694] =
    {   0,
        0,    0, 1527, 1528,   57,   60, 1521,    0, 1518, 1528,
       53,   77,   54,   67,  101,   75, 1513,   67,  146,   75,
       70,   55,    0,   79,   93,  138,   94,   89,   95,  133,
      139,  157,  140,  168,  142,  174,  148,  179,  180,  224,
      191,  103,  193,  143,   68, 1528, 1528,   80, 1518, 1528,
        0, 1515, 1528,  233,  209,  233,  187,    0,  266,  276,
      287,  302,  100, 1512,    0, 1466,    0,    0, 1508,  147,
      310,  212,  226,  197,  178,   97,    0,  192,  209,  205,
      260,  214,  229,  244,  264,  287,  261,  245,  303,  321,
      322,  324,  325,  327,  330,  329,  337,  332,  333,  328,

      334,  339,  336,  335,  340,  341,  249,  254,  134, 1507,
      338,  353, 1506,  342,  345,  344,  346,  352,  349,  348,
      355,  365,  364, 1505,  380,  385,  386,  395,  393,  396,
      397,  398,  399,  401,  402,  400,  404,  247,  407,  405,
      406,  409,  419,  408,  411,  430,  412,  413,  431,  435,
      416,  442,  466,  476,  484,  454,  459,  462,    0,    0,
      443,  478,  495,  496,  465, 1504,  497,  498,  499,  417,
      501,  502,  503,  505,  506,  507,  508,  510,  509,  511,
      512,  516,  514,  517,  515,  520,  513,  524,  525,  527,
      540,  528,  526,  547,  553,  542,  554,  556,  555,  558,

      559, 1503, 1502, 1501,  560,  561,  565,  563,  571,  568,
      569,  570,  572, 1500,  575,  578, 1499, 1498,  574,  579,
      580,  581,  582,  584,  583,  596,  597,  586,  600,  603,
      604,  605,  610, 1497,  608,  613,  611,  614,  619,  615,
      631,  621,  620,  623,  626,  632,  630,  633, 1496,  637,
      634,  639, 1495,  636,  647,  653,  638,  656,  641, 1496,
      676,  678, 1495,  679, 1490,  662,  665,  679,  682,  648,
     1491,  684,  686, 1490,  687, 1489,  688, 1488, 1487, 1486,
      690,  692,  691,  693,  694,  698,  696,  697,  699,  702,
      703, 1485,  707, 1484,  705, 1483,  709,  712,  713,  704,

      700,  710,  727, 1482,  719,  715,  729,  714,  716,  730,
      745,  723,  750,  752, 1481, 1480,  754,  755,  757,  759,
     1479,  761,  758,  762,  764,  766,  767,  768,  770,  771,
      772,  773,  778,  776,  774,  779,  781,  782,  783,  788,
      785,  786,  789,  798,  799,  787, 1478,  806,  807, 1477,
      808,  817,  812,  822, 1476,  824,  823, 1475,  828,  827,
      832, 1528,  834,  835,  837,  842, 1528,  827, 1474,  841,
      843,  849,  846, 1473,  842, 1472, 1471,  852,  853, 1470,
      854,  855,  856,  857,  858,  859,  861,  860,  865,  870,
      864,  867,  871, 1469,  868, 1468,  875,  874,  877,  873,

      878,  882,  879,  883,  898,  894,  907,  909,  910,  912,
      913,  915,  916,  917,  919, 1467,  921,  920,  923,  925,
     1466,  924,  928,  929,  931,  933, 1465,  934,  926, 1464,
      935,  936,  938,  940,  941,  946,  950,  956,  943,  954,
      953, 1463,  961,  968,  967, 1462, 1461, 1458, 1457,  973,
     1528, 1456, 1455, 1456, 1455,  969,  978, 1454, 1453,  979,
      983,  984,  986,  985,  990,  991,  989,  992, 1452, 1451,
     1450,  993,  996, 1449,  997,  999,  998, 1448, 1002, 1003,
     1004, 1005, 1447, 1006, 1446, 1001, 1016, 1019, 1445, 1020,
     1444, 1443, 1028, 1033, 1011, 1014, 1012, 1442, 1009, 1037,

     1042, 1441, 1044, 1045, 1440, 1439, 1047, 1438, 1437, 1436,
     1435, 1434, 1046, 1015, 1433, 1050, 1052, 1055, 1056, 1057,
     1430, 1058, 1059, 1346, 1060, 1062, 1063, 1065, 1071, 1068,
     1373, 1370, 1070, 1366, 1351, 1341, 1072, 1073, 1075, 1076,
     1078, 1322, 1082, 1081, 1085, 1090, 1084, 1091, 1093, 1310,
     1096, 1099, 1100, 1102, 1109, 1309, 1118, 1110, 1121, 1119,
     1308, 1123, 1307, 1124, 1122, 1306, 1277, 1126, 1303, 1127,
     1128, 1302, 1131, 1129, 1300, 1299, 1298, 1132, 1133, 1134,
     1136, 1135, 1139, 1297, 1140, 1138, 1154, 1147, 1296, 1295,
     1156, 1144, 1153, 1294, 1157, 1293, 1292, 1290, 1252, 1158,

     1161, 1164, 1169, 1288, 1173, 1175, 1178, 1287, 1182, 1286,
     1185, 1179, 1285, 1284, 1186, 1187, 1188, 1283, 1247, 1189,
     1191, 1190, 1192, 1278, 1276, 1275, 1193, 1194, 1198, 1195,
     1200, 1204, 1231, 1207, 1272, 1209, 1208, 1212, 1221, 1225,
     1223, 1229, 1211, 1232, 1233, 1270, 1227, 1226, 1268, 1142,
     1234, 1237, 1238, 1239, 1083, 1528,  640, 1240,  410, 1241,
     1242, 1244, 1252,  250, 1253, 1254, 1256, 1257, 1262,  201,
     1264,  184, 1267,   74, 1528, 1322, 1331, 1340, 1345, 1350,
     1355, 1360, 1365, 1370, 1376, 1377, 1385, 1394, 1398, 1406,
     1415, 1424, 1433

    } ;

static const flex_int16_t yy_def[694] =
    {   0,
      675,    1,  675,  675,  675,  675,  676,  677,  678,  675,
      679,  680,  675,  675,  675,  681,  682,  682,  682,  682,
      682,  682,  683,  682,  682,  682,  682,   19,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  675,  675,  675,  676,  675,
      677,  678,  675,  675,  684,  681,  685,  680,  680,  680,
       60,  680,  686,  687,  688,   15,  689,   56,  682,  682,
      675,   62,   19,  682,  682,  682,  683,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  675,   60,   60,   62,  690,  691,  688,  689,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  690,
      692,  690,  691,  693,  675,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  690,
      690,  675,  690,  693,  691,  691,  675,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  675,  675,  691,
      675,  675,  675,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      675,  682,  682,  675,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  675,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  675,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  675,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  675,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  675,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  675,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,    0,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675

    } ;

static const flex_int16_t yy_nxt[1587] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,    4,   11,
       12,   13,   14,   15,   16,   16,   16,   16,   16,   16,
       16,   17,   18,   19,   17,   17,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       17,   34,   35,   36,   37,   38,   17,   39,   40,   41,
       42,   43,   44,   17,   45,   17,   46,   47,   48,   48,
       48,   48,   48,   48,   54,   58,   55,   63,   63,   63,
       63,   63,   63,   63,   63,   64,   57,   58,   58,   65,
       58,   48,   48,   48,   58,   58,   54,   57,   59,   58,
       60,   61,   61,   61,   61,   61,   61,   61,   57,   74,

       62,   75,   76,   58,   58,   58,  152,   58,   70,   57,
       78,   62,   54,   58,   66,   66,   66,   66,   66,   66,
       66,   55,   79,   57,   57,   98,   80,   81,   93,   82,
       95,   83,   96,   99,   57,   57,  100,   84,   94,  101,
       85,  164,   97,   58,   58,  102,  146,   86,   58,   58,
       58,  204,   58,   58,   67,   71,   72,   58,   58,   73,
       73,   73,   73,   73,   73,   73,   73,   58,   87,  105,
      114,  107,  118,  108,  103,   88,  109,  104,   58,   89,
      150,  151,   90,   91,   58,  161,   92,  106,   58,   58,
       58,  122,  110,  123,   58,  124,   71,   71,  115,  111,

      112,   58,   58,   58,  119,  113,  116,   58,  120,  125,
      131,   58,  117,  126,  132,   58,  127,  163,  121,   58,
       54,  675,   58,  147,   58,  142,  128,  162,  143,  129,
      133,  148,   57,  130,   58,  675,   58,  149,  144,   58,
      165,  167,  166,   57,   54,  145,   63,   63,   63,   63,
       63,   63,   63,   63,   58,   58,   57,   58,  134,   58,
       58,  135,  136,  170,   58,  137,  138,   57,  202,  203,
       58,   58,  171,  139,   58,  176,  140,  239,  141,  154,
      154,  154,  154,  154,  154,  154,  154,   59,  172,   60,
       60,   60,   60,   60,   60,   60,   60,   58,  173,   62,

      155,  155,  155,  155,  155,  155,  155,  155,  168,  175,
       62,   71,   72,   58,  169,  156,  156,  156,  156,  156,
      156,  156,  156,  153,  153,  153,  153,  153,  153,  153,
      153,   58,   58,  177,   58,   58,  174,   58,   58,   58,
       58,  178,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  179,   58,   58,   58,  183,   58,   58,
      184,  182,   58,   58,  180,   58,  185,  181,  187,  190,
      201,  191,  195,  193,   58,   58,  194,  186,  188,  189,
      198,  196,  197,  205,  199,  206,  192,  211,  200,  213,
       58,  215,  212,  210,  207,   58,   58,  214,  216,  219,

      217,  208,  209,   58,  218,   58,   58,   58,   58,   58,
       58,   58,   58,  220,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,  226,  227,   58,   58,  221,   58,
      232,  223,  222,  224,  229,  228,  236,  240,  247,  225,
       58,   58,  238,  242,  230,   58,  235,  231,  233,  243,
      234,  244,   58,   58,  241,  237,  250,  245,  248,  253,
      254,  274,  249,  675,   58,  258,  246,  261,  251,  255,
      264,  262,  256,  257,  265,   58,  259,  266,  252,  153,
      153,  153,  153,  153,  153,  153,  153,   58,   58,  154,
      154,  154,  154,  154,  154,  154,  154,  155,  155,  155,

      155,  155,  155,  155,  155,   58,   58,   58,   58,   58,
      267,   58,   58,   58,  270,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,  269,  268,
       58,  275,  272,  277,   58,   58,   58,   58,   58,  278,
      279,  286,  273,  276,  282,  271,  287,  289,  292,  290,
       58,  291,   58,  283,  280,  288,  281,   58,  293,  284,
      285,  295,  297,   58,   58,   58,   58,  294,   58,   58,
       58,   58,  296,   58,  298,   58,  301,  299,   58,   58,
       58,   58,   58,  300,   58,   58,  302,  303,   58,   58,
       58,   58,   58,   58,   58,  305,   58,  306,  313,  304,

      314,  307,  309,  310,  308,  312,   58,   58,  316,  317,
       58,  323,  311,   58,   58,   58,  318,  320,   58,  315,
       58,   58,  322,   58,   58,   58,  319,  324,  321,   58,
       58,   58,  326,   58,  329,  325,   58,  327,  330,  328,
       58,   58,   58,   58,   58,  337,   58,   58,   58,   58,
       58,   58,  345,  331,  332,  335,  336,   58,   58,  333,
      339,  334,  338,   58,  340,  341,   58,  350,  346,  342,
      344,  351,   58,  349,  347,   58,  348,  353,  352,  357,
      355,  343,  359,  356,  361,  354,  261,  366,  362,   58,
      363,  367,   58,  358,   58,  372,   58,   58,   58,  369,

       58,   58,   58,   58,   58,  368,   58,   58,   58,   58,
       58,  370,   58,   58,   58,   58,  371,   58,  374,   58,
       58,  379,   58,   58,   58,   58,   58,  386,  376,   58,
      397,  373,  381,   58,  375,  378,  382,   58,  377,   58,
       58,  383,  380,  385,  389,  390,  394,  384,  400,  387,
      391,  388,  392,  396,  395,   58,  393,  399,  401,  398,
       58,  403,   58,  402,   58,   58,  404,   58,   58,   58,
      407,   58,   58,  405,   58,  406,   58,   58,   58,  408,
       58,   58,   58,   58,   58,  409,   58,  412,   58,   58,
      414,   58,   58,   58,  417,   58,   58,   58,   58,   58,

      418,  415,  410,  413,  421,  419,  411,  425,   58,   58,
      423,  416,  420,  428,  426,  433,   58,   58,   58,  422,
      424,  435,   58,  427,  431,  429,  432,   58,  438,  434,
      436,  430,   58,   58,   58,  261,  437,   58,   58,  448,
      261,  441,  261,  450,  449,  364,  363,  451,  443,  452,
      264,   58,   58,   58,  453,  440,   58,  446,  439,   58,
      442,  447,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,  444,  445,   58,   58,  454,   58,   58,  457,
       58,   58,  461,   58,   58,   58,  464,   58,   58,   58,
      455,  456,   58,   58,  469,  458,  459,  462,  463,  470,

      473,  460,  468,  466,   58,  471,  467,  476,   58,  475,
      481,  465,  477,  472,  474,  479,  484,   58,  478,   58,
       58,  480,   58,   58,  482,   58,   58,   58,  483,   58,
       58,   58,  485,   58,   58,   58,   58,  486,   58,   58,
      489,   58,  487,   58,   58,   58,   58,  491,   58,  495,
       58,   58,  497,   58,  488,  498,   58,  490,  499,  493,
       58,  506,  494,   58,   58,  504,   58,  505,  508,  492,
      496,   58,  502,  500,  503,  501,  510,   58,   58,   58,
      509,  364,  524,  512,  507,  521,  514,  517,   58,   58,
      511,  515,  516,   58,   58,   58,   58,  513,  519,   58,

       58,   58,   58,   58,  518,  520,   58,   58,   58,   58,
      523,   58,   58,   58,   58,   58,   58,  522,  527,   58,
      530,   58,   58,  531,   58,   58,   58,  528,  525,   58,
       58,  533,  538,  543,  526,  529,  536,  539,   58,  541,
      542,  532,  537,   58,  534,  540,  544,   58,  550,  545,
      546,  535,   58,  549,   58,   58,   58,   58,  547,  552,
       58,  551,   58,  548,  559,   58,   58,   58,   58,   58,
       58,  553,   58,   58,  555,   58,  554,  557,   58,  556,
       58,   58,   58,   58,  560,   58,   58,  561,   58,  562,
      558,   58,   58,   58,   58,   58,  569,  563,  564,  571,

       58,   58,  565,   58,  570,  572,   58,  568,  566,   58,
       58,  573,   58,  581,  574,  575,  580,  582,  576,   58,
       58,  579,  583,  585,  577,  584,  578,  586,   58,   58,
      587,   58,   58,   58,   58,  590,   58,   58,   58,   58,
      588,   58,   58,   58,   58,   58,   58,  589,   58,   58,
       58,  591,   58,  593,   58,  594,  596,   58,  597,  592,
      600,  603,  595,   58,   58,  605,   58,   58,   58,  598,
      608,   58,  604,  610,   58,  609,  602,  601,  607,   58,
      611,  614,  606,   58,  616,   58,  612,  613,   58,   58,
      615,  617,   58,  620,  621,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,  618,  624,   58,  622,
       58,  623,  627,  626,   58,  628,  631,   58,   58,   58,
      636,   58,   58,  625,  629,  635,  637,  634,  640,  638,
      639,   58,  642,   58,  630,   58,   58,   58,  644,   58,
      641,  647,   58,  632,   58,  643,  649,   58,   58,   58,
       58,   58,   58,  652,   58,  650,  648,  651,  654,  653,
      646,  657,   58,   58,   58,  655,   58,   58,  659,  660,
      663,  658,   58,  662,   58,  664,  665,   58,   58,  666,
       58,  656,   58,  645,  667,   58,   58,  661,   58,  668,
      670,  633,  669,   58,   58,   58,   58,   58,   58,  619,

       58,  671,   58,   58,   58,   58,   58,   58,   58,   58,
       58,  673,   58,   58,  599,  672,   58,   58,   58,   58,
       58,  674,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   51,   58,   51,   51,   51,   51,   51,   51,   51,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   56,
       56,   58,   56,   58,   58,   58,   58,   58,   58,   68,
       68,   58,   68,   69,   69,   69,   69,   69,   69,   77,
       77,   77,   77,   77,   55,   55,   58,   55,  153,  153,
       58,  153,   63,   58,   63,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  159,  567,  159,  159,  159,  159,

      159,  159,  159,  160,  160,  160,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,  365,  365,  360,
      360,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,  365,  364,  261,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,  675,
      158,   53,   50,   58,   53,   50,  675,    3,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675
    } ;

static const flex_int16_t yy_chk[1587] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    6,    6,    6,   11,   22,   11,   13,   13,   13,
       13,   13,   13,   13,   13,   14,   11,   18,   45,   14,
       21,   48,   48,   48,  674,   20,   16,   11,   12,   24,
       12,   12,   12,   12,   12,   12,   12,   12,   16,   20,

       12,   21,   22,   25,   27,   29,   45,   76,   18,   16,
       24,   12,   15,   42,   15,   15,   15,   15,   15,   15,
       15,   15,   24,   63,   15,   29,   24,   24,   27,   24,
       28,   25,   28,   29,   63,   15,   29,   25,   27,   29,
       25,   76,   28,   30,  109,   29,   42,   25,   26,   31,
       33,  109,   35,   44,   15,   19,   19,   70,   37,   19,
       19,   19,   19,   19,   19,   19,   19,   32,   26,   31,
       33,   32,   35,   32,   30,   26,   32,   30,   34,   26,
       44,   44,   26,   26,   36,   70,   26,   31,   75,   38,
       39,   37,   32,   37,  672,   37,   57,   57,   34,   32,

       32,   41,   78,   43,   36,   32,   34,   74,   36,   38,
       39,  670,   34,   38,   39,   80,   38,   75,   36,   79,
       55,   72,   72,   43,   82,   41,   38,   74,   41,   38,
       39,   43,   55,   38,   40,   73,   73,   43,   41,   83,
       78,   80,   79,   55,   56,   41,   54,   54,   54,   54,
       54,   54,   54,   54,   84,   88,   56,  138,   40,  107,
      664,   40,   40,   82,  108,   40,   40,   56,  107,  108,
       81,   87,   83,   40,   85,   88,   40,  138,   40,   59,
       59,   59,   59,   59,   59,   59,   59,   60,   84,   60,
       60,   60,   60,   60,   60,   60,   60,   86,   85,   60,

       61,   61,   61,   61,   61,   61,   61,   61,   81,   87,
       60,   62,   62,   89,   81,   62,   62,   62,   62,   62,
       62,   62,   62,   71,   71,   71,   71,   71,   71,   71,
       71,   90,   91,   89,   92,   93,   86,   94,  100,   96,
       95,   89,   98,   99,  101,  104,  103,   97,  111,  102,
      105,  106,  114,   90,  116,  115,  117,   93,  120,  119,
       93,   92,  118,  112,   90,  121,   93,   91,   95,   97,
      106,   97,  100,   98,  123,  122,   99,   94,   95,   96,
      103,  101,  102,  111,  104,  112,   97,  115,  105,  117,
      125,  119,  116,  114,  112,  126,  127,  118,  119,  122,

      120,  112,  112,  129,  121,  128,  130,  131,  132,  133,
      136,  134,  135,  123,  137,  140,  141,  139,  144,  142,
      659,  145,  147,  148,  129,  130,  151,  170,  125,  143,
      133,  127,  126,  128,  132,  131,  136,  139,  144,  128,
      146,  149,  137,  140,  132,  150,  135,  132,  134,  141,
      134,  142,  152,  161,  139,  136,  145,  143,  144,  147,
      148,  170,  144,  156,  156,  151,  143,  157,  146,  149,
      158,  157,  149,  150,  158,  165,  152,  161,  146,  153,
      153,  153,  153,  153,  153,  153,  153,  154,  162,  154,
      154,  154,  154,  154,  154,  154,  154,  155,  155,  155,

      155,  155,  155,  155,  155,  163,  164,  167,  168,  169,
      162,  171,  172,  173,  165,  174,  175,  176,  177,  179,
      178,  180,  181,  187,  183,  185,  182,  184,  164,  163,
      186,  171,  168,  173,  188,  189,  193,  190,  192,  174,
      175,  181,  169,  172,  178,  167,  182,  184,  187,  185,
      191,  186,  196,  179,  176,  183,  177,  194,  188,  180,
      180,  190,  192,  195,  197,  199,  198,  189,  200,  201,
      205,  206,  191,  208,  193,  207,  196,  194,  210,  211,
      212,  209,  213,  195,  219,  215,  197,  198,  216,  220,
      221,  222,  223,  225,  224,  200,  228,  201,  210,  199,

      211,  205,  206,  207,  205,  209,  226,  227,  213,  215,
      229,  223,  208,  230,  231,  232,  216,  220,  235,  212,
      233,  237,  222,  236,  238,  240,  219,  224,  221,  239,
      243,  242,  225,  244,  228,  224,  245,  226,  229,  227,
      247,  241,  246,  248,  251,  237,  254,  250,  257,  252,
      657,  259,  243,  230,  231,  235,  236,  255,  270,  232,
      239,  233,  238,  256,  240,  241,  258,  248,  244,  241,
      242,  250,  266,  247,  245,  267,  246,  252,  251,  257,
      255,  241,  259,  256,  261,  254,  262,  264,  261,  268,
      262,  264,  269,  258,  272,  270,  273,  275,  277,  267,

      281,  283,  282,  284,  285,  266,  287,  288,  286,  289,
      301,  268,  290,  291,  300,  295,  269,  293,  273,  297,
      302,  283,  298,  299,  308,  306,  309,  288,  277,  305,
      301,  272,  285,  312,  275,  282,  286,  303,  281,  307,
      310,  286,  284,  287,  291,  293,  298,  286,  305,  289,
      295,  290,  297,  300,  299,  311,  297,  303,  306,  302,
      313,  308,  314,  307,  317,  318,  309,  319,  323,  320,
      312,  322,  324,  310,  325,  311,  326,  327,  328,  313,
      329,  330,  331,  332,  335,  314,  334,  319,  333,  336,
      322,  337,  338,  339,  325,  341,  342,  346,  340,  343,

      326,  323,  317,  320,  329,  327,  318,  333,  344,  345,
      331,  324,  328,  336,  334,  341,  348,  349,  351,  330,
      332,  343,  353,  335,  339,  337,  340,  352,  346,  342,
      344,  338,  354,  357,  356,  360,  345,  368,  359,  360,
      361,  351,  363,  364,  361,  365,  363,  364,  353,  365,
      366,  370,  375,  371,  366,  349,  373,  357,  348,  372,
      352,  359,  378,  379,  381,  382,  383,  384,  385,  386,
      388,  387,  354,  356,  391,  389,  368,  392,  395,  372,
      390,  393,  379,  400,  398,  397,  383,  399,  401,  403,
      370,  371,  402,  404,  388,  373,  375,  381,  382,  389,

      392,  378,  387,  385,  406,  390,  386,  397,  405,  395,
      401,  384,  398,  391,  393,  400,  404,  407,  399,  408,
      409,  400,  410,  411,  402,  412,  413,  414,  403,  415,
      418,  417,  405,  419,  422,  420,  429,  406,  423,  424,
      409,  425,  407,  426,  428,  431,  432,  411,  433,  415,
      434,  435,  418,  439,  408,  419,  436,  410,  420,  413,
      437,  429,  414,  441,  440,  426,  438,  428,  432,  412,
      417,  443,  424,  422,  425,  423,  434,  445,  444,  456,
      433,  450,  460,  436,  431,  450,  438,  441,  457,  460,
      435,  439,  440,  461,  462,  464,  463,  437,  444,  467,

      465,  466,  468,  472,  443,  445,  473,  475,  477,  476,
      457,  486,  479,  480,  481,  482,  484,  456,  463,  499,
      466,  495,  497,  467,  496,  514,  487,  464,  461,  488,
      490,  472,  479,  486,  462,  465,  476,  480,  493,  482,
      484,  468,  477,  494,  473,  481,  487,  500,  496,  488,
      490,  475,  501,  495,  503,  504,  513,  507,  493,  499,
      516,  497,  517,  494,  514,  518,  519,  520,  522,  523,
      525,  500,  526,  527,  503,  528,  501,  507,  530,  504,
      533,  529,  537,  538,  516,  539,  540,  517,  541,  518,
      513,  544,  543,  655,  547,  545,  526,  519,  520,  528,

      546,  548,  522,  549,  527,  529,  551,  525,  523,  552,
      553,  530,  554,  544,  533,  537,  543,  545,  538,  555,
      558,  541,  546,  548,  539,  547,  540,  549,  557,  560,
      551,  559,  565,  562,  564,  554,  568,  570,  571,  574,
      552,  573,  578,  579,  580,  582,  581,  553,  586,  583,
      585,  555,  650,  558,  592,  559,  562,  588,  564,  557,
      568,  573,  560,  593,  587,  578,  591,  595,  600,  565,
      581,  601,  574,  583,  602,  582,  571,  570,  580,  603,
      585,  588,  579,  605,  592,  606,  586,  587,  607,  612,
      591,  593,  609,  600,  601,  611,  615,  616,  617,  620,

      622,  621,  623,  627,  628,  630,  595,  605,  629,  602,
      631,  603,  609,  607,  632,  611,  616,  634,  637,  636,
      622,  643,  638,  606,  612,  621,  623,  620,  629,  627,
      628,  639,  631,  641,  615,  640,  648,  647,  632,  642,
      630,  636,  644,  617,  651,  631,  638,  652,  653,  654,
      658,  660,  661,  641,  662,  639,  637,  640,  643,  642,
      634,  647,  663,  665,  666,  644,  667,  668,  651,  652,
      658,  648,  669,  654,  671,  660,  661,  673,  649,  662,
      646,  645,  635,  633,  663,  626,  625,  653,  624,  665,
      667,  619,  666,  618,  614,  613,  610,  608,  604,  599,

      598,  668,  597,  596,  594,  590,  589,  584,  577,  576,
      575,  671,  572,  569,  567,  669,  566,  563,  561,  556,
      550,  673,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  677,  542,  677,  677,  677,  677,  677,  677,  677,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  679,
      679,  536,  679,  680,  680,  680,  680,  680,  680,  681,
      681,  535,  681,  682,  682,  682,  682,  682,  682,  683,
      683,  683,  683,  683,  684,  684,  534,  684,  685,  685,
      532,  685,  686,  531,  686,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  688,  524,  688,  688,  688,  688,

      688,  688,  688,  689,  689,  689,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  521,  515,  512,  511,  510,  509,  508,  506,
      505,  502,  498,  492,  491,  489,  485,  483,  478,  474,
      471,  470,  469,  459,  458,  455,  454,  453,  452,  449,
      448,  447,  446,  442,  430,  427,  421,  416,  396,  394,
      380,  377,  376,  374,  369,  358,  355,  350,  347,  321,
      316,  315,  304,  296,  294,  292,  280,  279,  278,  276,

      274,  271,  265,  263,  260,  253,  249,  234,  218,  217,
      214,  204,  203,  202,  166,  124,  113,  110,   69,   66,
       64,   52,   49,   17,    9,    7,    3,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[142] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 
    0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 28 "thriftl.ll"

// Flex normally adds: #include <unistd.h>. This include is not supported
// by MSVC. With this, we get rid of that include to compile with MSVC.
#ifdef _WIN32
#  define YY_NO_UNISTD_H
#endif

#include <errno.h>

#include "thrift/compiler/common.h"
#include "thrift/compiler/globals.h"
#include "thrift/compiler/parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 *
 * Note macro expansion because this is different between OSS and internal
 * build, sigh.
 */
#include THRIFTY_HH

static void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

static void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

static void unexpected_token(char* text) {
  yyerror("Unexpected token in input: \"%s\"\n", text);
  exit(1);
}

/**
 * Current level of '{}' blocks. Some keywords (e.g. 'view') are considered as
 * reserved only if appears at the top level and might be used for other
 * purposes like field or argument names.
 */
int g_scope_level = 0;

#line 1124 "/home/hemant/fbthrift/thrift/compiler/thriftl.cc"
/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1131 "/home/hemant/fbthrift/thrift/compiler/thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 100 "thriftl.ll"


#line 1351 "/home/hemant/fbthrift/thrift/compiler/thriftl.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 676 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1528 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 102 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 103 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 104 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 105 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 108 "thriftl.ll"
{
  ++g_scope_level;
  return yytext[0];
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{
  --g_scope_level;
  return yytext[0];
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 116 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 118 "thriftl.ll"
{ yylval.iconst=0; return tok_bool_constant; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "thriftl.ll"
{ yylval.iconst=1; return tok_bool_constant; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 121 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 122 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 123 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 124 "thriftl.ll"
{ return tok_hs_include;           }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{
  yyerror("\"cpp_type\" is no longer allowed. "
    "Use the cpp.type annotation instead.\n");
  exit(1);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 133 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 137 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 138 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 139 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 140 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 141 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ return tok_float;                }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ return tok_slist;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ return tok_hash_map;             }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ return tok_hash_set;             }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ return tok_stream;               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{
  /* this is a hack; lex doesn't allow whitespace in trailing context,
   * so match entire "client throws" as a token
   */
  return tok_client;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 171 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 172 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 173 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 174 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 188 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 190 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 191 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 192 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 193 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 194 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 195 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 196 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 197 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 198 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 199 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 200 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 201 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 202 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 203 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 204 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 205 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 206 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 207 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 208 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 209 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 210 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 211 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 212 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 213 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 214 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 215 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 216 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 217 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 218 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 219 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 220 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 221 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 222 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 223 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 224 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 225 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 226 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 227 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 228 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 229 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 230 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 231 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 232 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 233 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 234 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 235 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 236 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 237 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 238 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 239 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 240 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 241 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 242 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 243 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 244 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 245 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 246 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 247 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 248 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 249 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 250 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 251 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 252 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 253 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 254 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 256 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+1, NULL, 8);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 265 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 274 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 283 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 288 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 293 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 298 "thriftl.ll"
{
  yylval.id = strdup(yytext+1);
  yylval.id[strlen(yylval.id)-1] = '\0';
  return tok_literal;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 304 "thriftl.ll"
{
  yylval.id = strdup(yytext+1);
  yylval.id[strlen(yylval.id)-1] = '\0';
  return tok_literal;
}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 310 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 322 "thriftl.ll"
{
  unexpected_token(yytext);
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 327 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2196 "/home/hemant/fbthrift/thrift/compiler/thriftl.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 676 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 676 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 675);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 327 "thriftl.ll"


/* vim: filetype=lex
*/

