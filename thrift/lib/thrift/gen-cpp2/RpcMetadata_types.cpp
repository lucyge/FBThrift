/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/lib/thrift/gen-cpp2/RpcMetadata_types.h"
#include "thrift/lib/thrift/gen-cpp2/RpcMetadata_types.tcc"

#include <algorithm>
#include <folly/Indestructible.h>

#include "thrift/lib/thrift/gen-cpp2/RpcMetadata_data.h"

namespace apache { namespace thrift {

const _ProtocolId_EnumMapFactory::ValuesToNamesMapType _ProtocolId_VALUES_TO_NAMES = _ProtocolId_EnumMapFactory::makeValuesToNamesMap();
const _ProtocolId_EnumMapFactory::NamesToValuesMapType _ProtocolId_NAMES_TO_VALUES = _ProtocolId_EnumMapFactory::makeNamesToValuesMap();

}} // apache::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> const std::size_t TEnumTraits< ::apache::thrift::ProtocolId>::size = 3;
template <> const folly::Range<const  ::apache::thrift::ProtocolId*> TEnumTraits< ::apache::thrift::ProtocolId>::values = folly::range( ::apache::thrift::_ProtocolIdEnumDataStorage::values);
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::thrift::ProtocolId>::names = folly::range( ::apache::thrift::_ProtocolIdEnumDataStorage::names);
template <> const char* TEnumTraits< ::apache::thrift::ProtocolId>::findName( ::apache::thrift::ProtocolId value) {
  static auto const map = folly::Indestructible< ::apache::thrift::_ProtocolId_EnumMapFactory::ValuesToNamesMapType>{ ::apache::thrift::_ProtocolId_EnumMapFactory::makeValuesToNamesMap()};
  return findName(*map, value);
}

template <> bool TEnumTraits< ::apache::thrift::ProtocolId>::findValue(const char* name,  ::apache::thrift::ProtocolId* outValue) {
  static auto const map = folly::Indestructible< ::apache::thrift::_ProtocolId_EnumMapFactory::NamesToValuesMapType>{ ::apache::thrift::_ProtocolId_EnumMapFactory::makeNamesToValuesMap()};
  return findValue(*map, name, outValue);
}

}} // apache::thrift
namespace apache { namespace thrift {

const _RpcKind_EnumMapFactory::ValuesToNamesMapType _RpcKind_VALUES_TO_NAMES = _RpcKind_EnumMapFactory::makeValuesToNamesMap();
const _RpcKind_EnumMapFactory::NamesToValuesMapType _RpcKind_NAMES_TO_VALUES = _RpcKind_EnumMapFactory::makeNamesToValuesMap();

}} // apache::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> const std::size_t TEnumTraits< ::apache::thrift::RpcKind>::size = 6;
template <> const folly::Range<const  ::apache::thrift::RpcKind*> TEnumTraits< ::apache::thrift::RpcKind>::values = folly::range( ::apache::thrift::_RpcKindEnumDataStorage::values);
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::thrift::RpcKind>::names = folly::range( ::apache::thrift::_RpcKindEnumDataStorage::names);
template <> const char* TEnumTraits< ::apache::thrift::RpcKind>::findName( ::apache::thrift::RpcKind value) {
  static auto const map = folly::Indestructible< ::apache::thrift::_RpcKind_EnumMapFactory::ValuesToNamesMapType>{ ::apache::thrift::_RpcKind_EnumMapFactory::makeValuesToNamesMap()};
  return findName(*map, value);
}

template <> bool TEnumTraits< ::apache::thrift::RpcKind>::findValue(const char* name,  ::apache::thrift::RpcKind* outValue) {
  static auto const map = folly::Indestructible< ::apache::thrift::_RpcKind_EnumMapFactory::NamesToValuesMapType>{ ::apache::thrift::_RpcKind_EnumMapFactory::makeNamesToValuesMap()};
  return findValue(*map, name, outValue);
}

}} // apache::thrift
namespace apache { namespace thrift {

const _RpcPriority_EnumMapFactory::ValuesToNamesMapType _RpcPriority_VALUES_TO_NAMES = _RpcPriority_EnumMapFactory::makeValuesToNamesMap();
const _RpcPriority_EnumMapFactory::NamesToValuesMapType _RpcPriority_NAMES_TO_VALUES = _RpcPriority_EnumMapFactory::makeNamesToValuesMap();

}} // apache::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> const std::size_t TEnumTraits< ::apache::thrift::RpcPriority>::size = 6;
template <> const folly::Range<const  ::apache::thrift::RpcPriority*> TEnumTraits< ::apache::thrift::RpcPriority>::values = folly::range( ::apache::thrift::_RpcPriorityEnumDataStorage::values);
template <> const folly::Range<const folly::StringPiece*> TEnumTraits< ::apache::thrift::RpcPriority>::names = folly::range( ::apache::thrift::_RpcPriorityEnumDataStorage::names);
template <> const char* TEnumTraits< ::apache::thrift::RpcPriority>::findName( ::apache::thrift::RpcPriority value) {
  static auto const map = folly::Indestructible< ::apache::thrift::_RpcPriority_EnumMapFactory::ValuesToNamesMapType>{ ::apache::thrift::_RpcPriority_EnumMapFactory::makeValuesToNamesMap()};
  return findName(*map, value);
}

template <> bool TEnumTraits< ::apache::thrift::RpcPriority>::findValue(const char* name,  ::apache::thrift::RpcPriority* outValue) {
  static auto const map = folly::Indestructible< ::apache::thrift::_RpcPriority_EnumMapFactory::NamesToValuesMapType>{ ::apache::thrift::_RpcPriority_EnumMapFactory::makeNamesToValuesMap()};
  return findValue(*map, name, outValue);
}

}} // apache::thrift
namespace apache { namespace thrift {

RequestRpcMetadata::RequestRpcMetadata() :
      protocol( ::apache::thrift::ProtocolId::BINARY),
      kind( ::apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE),
      seqId(0),
      clientTimeoutMs(0),
      queueTimeoutMs(0),
      priority( ::apache::thrift::RpcPriority::HIGH_IMPORTANT) {}


RequestRpcMetadata::~RequestRpcMetadata() {}

RequestRpcMetadata::RequestRpcMetadata(apache::thrift::FragileConstructor,  ::apache::thrift::ProtocolId protocol__arg, std::string name__arg,  ::apache::thrift::RpcKind kind__arg, int32_t seqId__arg, int32_t clientTimeoutMs__arg, int32_t queueTimeoutMs__arg,  ::apache::thrift::RpcPriority priority__arg, std::map<std::string, std::string> otherMetadata__arg, std::string host__arg, std::string url__arg) :
    protocol(std::move(protocol__arg)),
    name(std::move(name__arg)),
    kind(std::move(kind__arg)),
    seqId(std::move(seqId__arg)),
    clientTimeoutMs(std::move(clientTimeoutMs__arg)),
    queueTimeoutMs(std::move(queueTimeoutMs__arg)),
    priority(std::move(priority__arg)),
    otherMetadata(std::move(otherMetadata__arg)),
    host(std::move(host__arg)),
    url(std::move(url__arg)) {
  __isset.protocol = true;
  __isset.name = true;
  __isset.kind = true;
  __isset.seqId = true;
  __isset.clientTimeoutMs = true;
  __isset.queueTimeoutMs = true;
  __isset.priority = true;
  __isset.otherMetadata = true;
  __isset.host = true;
  __isset.url = true;
}

void RequestRpcMetadata::__clear() {
  // clear all fields
  protocol =  ::apache::thrift::ProtocolId::BINARY;
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  kind =  ::apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE;
  seqId = 0;
  clientTimeoutMs = 0;
  queueTimeoutMs = 0;
  priority =  ::apache::thrift::RpcPriority::HIGH_IMPORTANT;
  otherMetadata.clear();
  host = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  url = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  __isset = {};
}

bool RequestRpcMetadata::operator==(const RequestRpcMetadata& rhs) const {
  if (__isset.protocol != rhs.__isset.protocol) {
    return false;
  }
  else if (__isset.protocol && !((protocol == rhs.protocol))) {
    return false;
  }
  if (__isset.name != rhs.__isset.name) {
    return false;
  }
  else if (__isset.name && !((name == rhs.name))) {
    return false;
  }
  if (__isset.kind != rhs.__isset.kind) {
    return false;
  }
  else if (__isset.kind && !((kind == rhs.kind))) {
    return false;
  }
  if (__isset.seqId != rhs.__isset.seqId) {
    return false;
  }
  else if (__isset.seqId && !((seqId == rhs.seqId))) {
    return false;
  }
  if (__isset.clientTimeoutMs != rhs.__isset.clientTimeoutMs) {
    return false;
  }
  else if (__isset.clientTimeoutMs && !((clientTimeoutMs == rhs.clientTimeoutMs))) {
    return false;
  }
  if (__isset.queueTimeoutMs != rhs.__isset.queueTimeoutMs) {
    return false;
  }
  else if (__isset.queueTimeoutMs && !((queueTimeoutMs == rhs.queueTimeoutMs))) {
    return false;
  }
  if (__isset.priority != rhs.__isset.priority) {
    return false;
  }
  else if (__isset.priority && !((priority == rhs.priority))) {
    return false;
  }
  if (__isset.otherMetadata != rhs.__isset.otherMetadata) {
    return false;
  }
  else if (__isset.otherMetadata && !((otherMetadata == rhs.otherMetadata))) {
    return false;
  }
  if (__isset.host != rhs.__isset.host) {
    return false;
  }
  else if (__isset.host && !((host == rhs.host))) {
    return false;
  }
  if (__isset.url != rhs.__isset.url) {
    return false;
  }
  else if (__isset.url && !((url == rhs.url))) {
    return false;
  }
  return true;
}

const std::map<std::string, std::string>* RequestRpcMetadata::get_otherMetadata() const& {
  return __isset.otherMetadata ? std::addressof(otherMetadata) : nullptr;
}

std::map<std::string, std::string>* RequestRpcMetadata::get_otherMetadata() & {
  return __isset.otherMetadata ? std::addressof(otherMetadata) : nullptr;
}

void RequestRpcMetadata::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "protocol") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "name") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "kind") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "seqId") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "clientTimeoutMs") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "queueTimeoutMs") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "priority") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "otherMetadata") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "host") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "url") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_STRING;
  }
}

void swap(RequestRpcMetadata& a, RequestRpcMetadata& b) {
  using ::std::swap;
  swap(a.protocol, b.protocol);
  swap(a.name, b.name);
  swap(a.kind, b.kind);
  swap(a.seqId, b.seqId);
  swap(a.clientTimeoutMs, b.clientTimeoutMs);
  swap(a.queueTimeoutMs, b.queueTimeoutMs);
  swap(a.priority, b.priority);
  swap(a.otherMetadata, b.otherMetadata);
  swap(a.host, b.host);
  swap(a.url, b.url);
  swap(a.__isset, b.__isset);
}

template uint32_t RequestRpcMetadata::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RequestRpcMetadata::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RequestRpcMetadata::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RequestRpcMetadata::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RequestRpcMetadata::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t RequestRpcMetadata::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RequestRpcMetadata::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RequestRpcMetadata::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // apache::thrift
namespace apache { namespace thrift {

ResponseRpcMetadata::ResponseRpcMetadata(apache::thrift::FragileConstructor,  ::apache::thrift::ProtocolId protocol__arg, int32_t seqId__arg, std::map<std::string, std::string> otherMetadata__arg) :
    protocol(std::move(protocol__arg)),
    seqId(std::move(seqId__arg)),
    otherMetadata(std::move(otherMetadata__arg)) {
  __isset.protocol = true;
  __isset.seqId = true;
  __isset.otherMetadata = true;
}

void ResponseRpcMetadata::__clear() {
  // clear all fields
  protocol =  ::apache::thrift::ProtocolId::BINARY;
  seqId = 0;
  otherMetadata.clear();
  __isset = {};
}

bool ResponseRpcMetadata::operator==(const ResponseRpcMetadata& rhs) const {
  if (__isset.protocol != rhs.__isset.protocol) {
    return false;
  }
  else if (__isset.protocol && !((protocol == rhs.protocol))) {
    return false;
  }
  if (__isset.seqId != rhs.__isset.seqId) {
    return false;
  }
  else if (__isset.seqId && !((seqId == rhs.seqId))) {
    return false;
  }
  if (__isset.otherMetadata != rhs.__isset.otherMetadata) {
    return false;
  }
  else if (__isset.otherMetadata && !((otherMetadata == rhs.otherMetadata))) {
    return false;
  }
  return true;
}

const std::map<std::string, std::string>* ResponseRpcMetadata::get_otherMetadata() const& {
  return __isset.otherMetadata ? std::addressof(otherMetadata) : nullptr;
}

std::map<std::string, std::string>* ResponseRpcMetadata::get_otherMetadata() & {
  return __isset.otherMetadata ? std::addressof(otherMetadata) : nullptr;
}

void ResponseRpcMetadata::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "protocol") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "seqId") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "otherMetadata") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_MAP;
  }
}

void swap(ResponseRpcMetadata& a, ResponseRpcMetadata& b) {
  using ::std::swap;
  swap(a.protocol, b.protocol);
  swap(a.seqId, b.seqId);
  swap(a.otherMetadata, b.otherMetadata);
  swap(a.__isset, b.__isset);
}

template uint32_t ResponseRpcMetadata::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ResponseRpcMetadata::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ResponseRpcMetadata::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ResponseRpcMetadata::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ResponseRpcMetadata::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t ResponseRpcMetadata::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ResponseRpcMetadata::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ResponseRpcMetadata::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // apache::thrift
